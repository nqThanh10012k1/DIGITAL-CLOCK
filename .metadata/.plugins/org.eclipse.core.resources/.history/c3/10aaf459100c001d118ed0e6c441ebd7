/*
 * main.c
 *
 *  Created on: Jul 13, 2022
 *      Author: Thanh Nguyen
 */

#include <stm32f401re_rcc.h>
#include <stm32f401re_gpio.h>
#include <stm32f401re_spi.h>
#include <stm32f401re_i2c.h>
#include <stm32f401re_tim.h>
#include <stm32f401re_usart.h>
#include <stm32f401re_exti.h>
#include <stm32f401re_syscfg.h>
#include <misc.h>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>

#define I2C1_GPIO_PORT						GPIOB
#define I2C1_GPIO_SCL						GPIO_Pin_8
#define I2C1_GPIO_SDA						GPIO_Pin_9

#define TRANSMITTER							0
#define RECEIVER							1

#define SPI2_GPIO_PORT						GPIOB
#define SPI2_SCK_PIN						GPIO_Pin_13
#define SPI2_MOSI_PIN						GPIO_Pin_15
#define SPI2_NSS_PIN						GPIO_Pin_12

#define DS3231_ADDRESS						0x68
#define HOURS_ADDRESS						0x02
#define MINUTES_ADDRESS						0x01
#define SECONDS_ADDRESS						0x00

uint8_t max7219_code[10] = {0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B};

typedef struct
{
	uint8_t hours;
	uint8_t minutes;
	uint8_t seconds;
} tim_t;

tim_t real_time, alarm_time;

typedef enum
{
	normal, alarm_setting, wait_alarm, alarming,
} clock_mode_t;

clock_mode_t clock_mode = normal;

typedef enum
{
	hours_setting, minutes_setting,
} setting_mode_t;

setting_mode_t setting_mode = hours_setting;

uint8_t old_seconds;

void I2C1_Init();
void I2Cx_SendData(I2C_TypeDef * I2Cx, uint8_t SlaveAddress, uint8_t RegisterAddress, uint8_t data);
uint8_t I2Cx_ReceiveData(I2C_TypeDef * I2Cx, uint8_t SlaveAddress, uint8_t RegisterAddress);
tim_t DS3231_ReadRealTime();
void DS3231_SetAlarmTime(tim_t time_alarm);
clock_mode_t DS3231_GetClockStatus(clock_mode_t clock_mod);
void SPI2_MasterInit();
void SPI_Send_Data(SPI_TypeDef * SPIx, uint16_t data);
void MAX7219_Init();
void MAX7219_DisplayTime(tim_t real_tim, tim_t tim_alarm, clock_mode_t clk_mod, setting_mode_t sett_mod);
void BUTTON_Init();
void delay_ms(uint32_t ms);

int main()
{
	SystemCoreClockUpdate();
	I2C1_Init();
	SPI2_MasterInit();
	MAX7219_Init();
	BUTTON_Init();

	alarm_time.hours = 0;
	alarm_time.minutes = 0;

	while (1)
	{
		clock_mode = DS3231_GetClockStatus(clock_mode);
		real_time = DS3231_ReadRealTime();
		if (real_time.seconds != old_seconds)
		{
			MAX7219_DisplayTime(real_time, alarm_time, clock_mode, setting_mode);
		}
	}
}

/********* I2C & DS3231 ***************************************************************************/

void I2C1_Init()
{
	GPIO_InitTypeDef	GPIO_InitStructure;
	I2C_InitTypeDef		I2C_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_OType = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_I2C1);
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_ClockSpeed = 400000;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = ENABLE;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
	I2C_Init(I2C1, &I2C_InitStructure);
	I2C_Cmd(I2C1, ENABLE);
}

void I2Cx_SendData(I2C_TypeDef * I2Cx, uint8_t SlaveAddress, uint8_t RegisterAddress, uint8_t data)
{
	// I2C start
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
	I2C_GenerateSTART(I2Cx, ENABLE);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
	// I2C address phase
	I2C_Send7bitAddress(I2Cx, SlaveAddress << 1, I2C_Direction_Transmitter);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
	I2C_SendData(I2Cx, RegisterAddress);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	I2C_SendData(I2Cx, data);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	I2C_GenerateSTOP(I2Cx, ENABLE);
}

uint8_t I2Cx_ReceiveData(I2C_TypeDef * I2Cx, uint8_t SlaveAddress, uint8_t RegisterAddress)
{
	uint8_t data;

	// I2C start
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
	I2C_GenerateSTART(I2Cx, ENABLE);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
	// I2C address phase
	I2C_Send7bitAddress(I2Cx, SlaveAddress << 1, I2C_Direction_Transmitter);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
	// I2C send register address
	I2C_SendData(I2Cx, RegisterAddress);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	// I2C stop
	I2C_GenerateSTOP(I2Cx, ENABLE);

	// I2C start
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
	I2C_GenerateSTART(I2Cx, ENABLE);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
	// I2C address phase
	I2C_Send7bitAddress(I2Cx, SlaveAddress << 1, I2C_Direction_Receiver);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
	// I2C receive data
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));
	data = I2C_ReceiveData(I2Cx);
	// I2C stop
	I2C_GenerateSTOP(I2Cx, ENABLE);

	return data;
}

tim_t DS3231_ReadRealTime()
{
	uint8_t temp;
	tim_t time;

	temp = I2Cx_ReceiveData(I2C1, DS3231_ADDRESS, HOURS_ADDRESS);
	time.hours = (temp >> 4) * 10 + (temp & 0x0F);
	temp = I2Cx_ReceiveData(I2C1, DS3231_ADDRESS, MINUTES_ADDRESS);
	time.minutes = (temp >> 4) * 10 + (temp & 0x0F);
	temp = I2Cx_ReceiveData(I2C1, DS3231_ADDRESS, SECONDS_ADDRESS);
	time.seconds = (temp >> 4) * 10 + (temp & 0x0F);

	return time;
}

void DS3231_SetAlarmTime(tim_t time_alarm)
{
	I2Cx_SendData(I2C1, DS3231_ADDRESS, 0x0B, ((time_alarm.minutes / 10) << 4) | (time_alarm.minutes % 10));
	I2Cx_SendData(I2C1, DS3231_ADDRESS, 0x0C, ((time_alarm.hours / 10) << 4) | (time_alarm.hours % 10));
	I2Cx_SendData(I2C1, DS3231_ADDRESS, 0x0D, (1 << 7));
}

clock_mode_t DS3231_GetClockStatus(clock_mode_t clock_mod)
{
	uint8_t data;

	if (clock_mod == wait_alarm)
	{
		data = I2Cx_ReceiveData(I2C1, DS3231_ADDRESS, 0x0F);
		I2Cx_SendData(I2C1, DS3231_ADDRESS, 0x0F, data & ~0x02);
		if ((data & 0x02) != 0)
		{
			clock_mod = alarming;
			return clock_mod;
		}
	}

	return clock_mod;
}

void DS3231_ClearAlarmFlag()
{

	//data = I2Cx_ReceiveData(I2C1, DS3231_ADDRESS, 0x0F);
	//data &= ~0x02;
	//I2Cx_SendData(I2C1, DS3231_ADDRESS, 0x0F, data);
}

/********* SPI & MAX7219 ***************************************************************************/

void SPI2_MasterInit()
{
	GPIO_InitTypeDef GPIO_Init_Structure;
	SPI_InitTypeDef SPI_Init_Structure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	GPIO_Init_Structure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init_Structure.GPIO_OType = GPIO_OType_PP;
	GPIO_Init_Structure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init_Structure.GPIO_Speed = GPIO_Speed_50MHz;

	GPIO_Init_Structure.GPIO_Pin = SPI2_SCK_PIN;
	GPIO_PinAFConfig(SPI2_GPIO_PORT, GPIO_PinSource13, GPIO_AF_SPI2);
	GPIO_Init(SPI2_GPIO_PORT, &GPIO_Init_Structure);

	GPIO_Init_Structure.GPIO_Pin = SPI2_MOSI_PIN;
	GPIO_PinAFConfig(SPI2_GPIO_PORT, GPIO_PinSource15, GPIO_AF_SPI2);
	GPIO_Init(SPI2_GPIO_PORT, &GPIO_Init_Structure);

	GPIO_Init_Structure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_Init_Structure.GPIO_OType = GPIO_OType_PP;
	GPIO_Init_Structure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init_Structure.GPIO_Speed = GPIO_Speed_50MHz;

	GPIO_Init_Structure.GPIO_Pin = SPI2_NSS_PIN;
	GPIO_Init(SPI2_GPIO_PORT, &GPIO_Init_Structure);

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
	SPI_Init_Structure.SPI_Mode = SPI_Mode_Master;
	SPI_Init_Structure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_Init_Structure.SPI_CPOL = SPI_CPOL_Low;
	SPI_Init_Structure.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_Init_Structure.SPI_DataSize = SPI_DataSize_16b;
	SPI_Init_Structure.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_Init_Structure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32;
	SPI_Init_Structure.SPI_NSS = SPI_NSS_Soft;
	SPI_Init(SPI2,  &SPI_Init_Structure);
	SPI_Cmd(SPI2, ENABLE);
}

void SPI_Send_Data(SPI_TypeDef * SPIx, uint16_t data)
{
	GPIO_ResetBits(SPI2_GPIO_PORT, SPI2_NSS_PIN);
	SPI_I2S_SendData(SPI2, data);
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == 1);
	GPIO_SetBits(SPI2_GPIO_PORT, SPI2_NSS_PIN);
}

void MAX7219_Init()
{
	// normal operation
	SPI_Send_Data(SPI2, (0x0C << 8) | 0x01);
	// no decode all digits
	SPI_Send_Data(SPI2, (0x09 << 8) | 0x00);
	// intensity 15/32
	SPI_Send_Data(SPI2, (0x0A << 8) | 0x07);
	// display all digits
	SPI_Send_Data(SPI2, (0x0B << 8) | 0x07);
}

void MAX7219_DisplayTime(tim_t real_tim, tim_t tim_alarm, clock_mode_t clk_mod, setting_mode_t sett_mod)
{
	switch (clock_mode)
	{
		case normal:
		{
			SPI_Send_Data(SPI2, (8 << 8) | max7219_code[real_tim.hours / 10]);
			SPI_Send_Data(SPI2, (7 << 8) | max7219_code[real_tim.hours % 10]);
			SPI_Send_Data(SPI2, (6 << 8) | 0x01);
			SPI_Send_Data(SPI2, (5 << 8) | max7219_code[real_tim.minutes / 10]);
			SPI_Send_Data(SPI2, (4 << 8) | max7219_code[real_tim.minutes % 10]);
			SPI_Send_Data(SPI2, (3 << 8) | 0);
			SPI_Send_Data(SPI2, (2 << 8) | 0);
			SPI_Send_Data(SPI2, (1 << 8) | 0);
			break;
		}
		case alarm_setting:
		{
			if (setting_mode == hours_setting)
			{
				SPI_Send_Data(SPI2, (0x0A << 8) | 0x0F);
				SPI_Send_Data(SPI2, (8 << 8) | max7219_code[tim_alarm.hours / 10]);
				SPI_Send_Data(SPI2, (7 << 8) | max7219_code[tim_alarm.hours % 10]);
				SPI_Send_Data(SPI2, (6 << 8) | 0x01);
				delay_ms(3);
				SPI_Send_Data(SPI2, (8 << 8) | 0x00);
				SPI_Send_Data(SPI2, (7 << 8) | 0x00);
				SPI_Send_Data(SPI2, (6 << 8) | 0x00);
				SPI_Send_Data(SPI2, (5 << 8) | 0x00);
				SPI_Send_Data(SPI2, (4 << 8) | 0x00);
				SPI_Send_Data(SPI2, (3 << 8) | 0x00);
				SPI_Send_Data(SPI2, (2 << 8) | 0x00);
				SPI_Send_Data(SPI2, (1 << 8) | 0x00);
				SPI_Send_Data(SPI2, (0x0A << 8) | 0x01);
				SPI_Send_Data(SPI2, (5 << 8) | max7219_code[tim_alarm.minutes / 10]);
				SPI_Send_Data(SPI2, (4 << 8) | max7219_code[tim_alarm.minutes % 10]);
				delay_ms(3);
				SPI_Send_Data(SPI2, (8 << 8) | 0x00);
				SPI_Send_Data(SPI2, (7 << 8) | 0x00);
				SPI_Send_Data(SPI2, (6 << 8) | 0x00);
				SPI_Send_Data(SPI2, (5 << 8) | 0x00);
				SPI_Send_Data(SPI2, (4 << 8) | 0x00);
				SPI_Send_Data(SPI2, (3 << 8) | 0x00);
				SPI_Send_Data(SPI2, (2 << 8) | 0x00);
				SPI_Send_Data(SPI2, (1 << 8) | 0x00);
			}
			else
			{
				SPI_Send_Data(SPI2, (0x0A << 8) | 0x01);
				SPI_Send_Data(SPI2, (8 << 8) | max7219_code[tim_alarm.hours / 10]);
				SPI_Send_Data(SPI2, (7 << 8) | max7219_code[tim_alarm.hours % 10]);
				delay_ms(3);
				SPI_Send_Data(SPI2, (8 << 8) | 0x00);
				SPI_Send_Data(SPI2, (7 << 8) | 0x00);
				SPI_Send_Data(SPI2, (6 << 8) | 0x00);
				SPI_Send_Data(SPI2, (5 << 8) | 0x00);
				SPI_Send_Data(SPI2, (4 << 8) | 0x00);
				SPI_Send_Data(SPI2, (3 << 8) | 0x00);
				SPI_Send_Data(SPI2, (2 << 8) | 0x00);
				SPI_Send_Data(SPI2, (1 << 8) | 0x00);
				SPI_Send_Data(SPI2, (0x0A << 8) | 0x0F);
				SPI_Send_Data(SPI2, (5 << 8) | max7219_code[tim_alarm.minutes / 10]);
				SPI_Send_Data(SPI2, (4 << 8) | max7219_code[tim_alarm.minutes % 10]);
				SPI_Send_Data(SPI2, (6 << 8) | 0x01);
				delay_ms(3);
				SPI_Send_Data(SPI2, (8 << 8) | 0x00);
				SPI_Send_Data(SPI2, (7 << 8) | 0x00);
				SPI_Send_Data(SPI2, (6 << 8) | 0x00);
				SPI_Send_Data(SPI2, (5 << 8) | 0x00);
				SPI_Send_Data(SPI2, (4 << 8) | 0x00);
				SPI_Send_Data(SPI2, (3 << 8) | 0x00);
				SPI_Send_Data(SPI2, (2 << 8) | 0x00);
				SPI_Send_Data(SPI2, (1 << 8) | 0x00);
			}
			break;
		}
		case wait_alarm:
		{
			SPI_Send_Data(SPI2, (8 << 8) | max7219_code[real_tim.hours / 10]);
			SPI_Send_Data(SPI2, (7 << 8) | max7219_code[real_tim.hours % 10]);
			SPI_Send_Data(SPI2, (6 << 8) | 0x01);
			SPI_Send_Data(SPI2, (5 << 8) | max7219_code[real_tim.minutes / 10]);
			SPI_Send_Data(SPI2, (4 << 8) | max7219_code[real_tim.minutes % 10]);
			SPI_Send_Data(SPI2, (3 << 8) | 0x80);
			SPI_Send_Data(SPI2, (2 << 8) | 0x80);
			SPI_Send_Data(SPI2, (1 << 8) | 0x80);
			break;
		}
		case alarming:
		{
			if ((real_tim.seconds % 2) == 0)
			{
				SPI_Send_Data(SPI2, (8 << 8) | max7219_code[real_tim.hours / 10]);
				SPI_Send_Data(SPI2, (7 << 8) | max7219_code[real_tim.hours % 10]);
				SPI_Send_Data(SPI2, (6 << 8) | 0x01);
				SPI_Send_Data(SPI2, (5 << 8) | max7219_code[real_tim.minutes / 10]);
				SPI_Send_Data(SPI2, (4 << 8) | max7219_code[real_tim.minutes % 10]);
				SPI_Send_Data(SPI2, (3 << 8) | 0x00);
				SPI_Send_Data(SPI2, (2 << 8) | 0x00);
				SPI_Send_Data(SPI2, (1 << 8) | 0x00);
			}
			else
			{
				SPI_Send_Data(SPI2, (8 << 8) | 0x00);
				SPI_Send_Data(SPI2, (7 << 8) | 0x00);
				SPI_Send_Data(SPI2, (6 << 8) | 0x00);
				SPI_Send_Data(SPI2, (5 << 8) | 0x00);
				SPI_Send_Data(SPI2, (4 << 8) | 0x00);
				SPI_Send_Data(SPI2, (3 << 8) | 0x00);
				SPI_Send_Data(SPI2, (2 << 8) | 0x00);
				SPI_Send_Data(SPI2, (1 << 8) | 0x00);
			}
			break;
		}
		default:
			break;
	}
}

/********* BUTTON *******************************************************************************/

void BUTTON_Init()
{
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
	GPIO_Init(GPIOC, &GPIO_InitStructure);

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource8);
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource9);
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource10);
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource11);

	EXTI_InitStructure.EXTI_Line = EXTI_Line8 | EXTI_Line9 | EXTI_Line10 | EXTI_Line11;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);

	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;
	NVIC_Init(&NVIC_InitStructure);
	NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
	NVIC_Init(&NVIC_InitStructure);
}

void EXTI9_5_IRQHandler()
{
	uint8_t temp = GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_8);

	if (temp == 1)
	{
		if ((clock_mode == normal) || (clock_mode == wait_alarm))
		{
			clock_mode = alarm_setting;
		}
		else if (clock_mode == alarm_setting)
		{
			clock_mode = wait_alarm;
			DS3231_SetAlarmTime(alarm_time);
		}

		EXTI_ClearITPendingBit(EXTI_Line8);
	}
	else
	{
		if (clock_mode == alarm_setting)
		{
			if (setting_mode == hours_setting)
			{
				if (alarm_time.hours < 23)
				{
					alarm_time.hours++;
				}
				else
				{
					alarm_time.hours = 0;
				}
			}
			else
			{
				if (alarm_time.minutes < 59)
				{
					alarm_time.minutes++;
				}
				else
				{
					alarm_time.minutes = 0;
				}
			}
		}

		EXTI_ClearITPendingBit(EXTI_Line9);
	}
}

void EXTI15_10_IRQHandler()
{
	uint8_t temp = GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_10);

	if (temp == 1)
	{
		if (setting_mode == hours_setting)
		{
			if (alarm_time.hours > 0)
			{
				alarm_time.hours--;
			}
			else
			{
				alarm_time.hours = 23;
			}
		}
		else
		{
			if (alarm_time.minutes > 0)
			{
				alarm_time.minutes--;
			}
			else
			{
				alarm_time.minutes = 59;
			}
		}

		EXTI_ClearITPendingBit(EXTI_Line10);
	}
	else
	{
		if (clock_mode == alarm_setting)
		{
			if (setting_mode == hours_setting)
			{
				setting_mode = minutes_setting;
			}
			else if (setting_mode == minutes_setting)
			{
				setting_mode = hours_setting;
			}
		}
		else if (clock_mode == wait_alarm)
		{
			clock_mode = normal;
		}
		else if (clock_mode == alarming)
		{
			clock_mode = normal;
		}
		else
		{
			clock_mode = wait_alarm;
			DS3231_SetAlarmTime(alarm_time);
		}

		EXTI_ClearITPendingBit(EXTI_Line11);
	}
}

void delay_ms(uint32_t ms)
{
	for (uint32_t i = 0; i < ms; i++)
	{
		for (uint32_t j = 0; j < 5000; j++);
	}
}
