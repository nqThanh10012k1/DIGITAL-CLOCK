
DIGITAL_CLOCK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c90  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001e24  08001e24  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001e24  08001e24  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08001e24  08001e24  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e24  08001e24  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e24  08001e24  00011e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e28  08001e28  00011e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08001e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000030  08001e5c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08001e5c  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004edc  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000107a  00000000  00000000  00024f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  00025fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000568  00000000  00000000  000265b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ee33  00000000  00000000  00026b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004ecd  00000000  00000000  00035953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004c015  00000000  00000000  0003a820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a3  00000000  00000000  00086835  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001924  00000000  00000000  000868d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000030 	.word	0x20000030
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001e0c 	.word	0x08001e0c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000034 	.word	0x20000034
 80001d0:	08001e0c 	.word	0x08001e0c

080001d4 <main>:
void MAX7219_DisplayTime(tim_t real_tim, tim_t tim_alarm, clock_mode_t clk_mod, setting_mode_t sett_mod);
void BUTTON_Init();
void delay_ms(uint32_t ms);

int main()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 80001d8:	f000 ff8a 	bl	80010f0 <SystemCoreClockUpdate>
	I2C1_Init();
 80001dc:	f000 f83c 	bl	8000258 <I2C1_Init>
	SPI2_MasterInit();
 80001e0:	f000 fa30 	bl	8000644 <SPI2_MasterInit>
	MAX7219_Init();
 80001e4:	f000 faba 	bl	800075c <MAX7219_Init>
	BUTTON_Init();
 80001e8:	f000 fde4 	bl	8000db4 <BUTTON_Init>

	alarm_time.hours = 0;
 80001ec:	4b15      	ldr	r3, [pc, #84]	; (8000244 <main+0x70>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	701a      	strb	r2, [r3, #0]
	alarm_time.minutes = 0;
 80001f2:	4b14      	ldr	r3, [pc, #80]	; (8000244 <main+0x70>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	705a      	strb	r2, [r3, #1]

	while (1)
	{
		clock_mode = DS3231_GetClockStatus(clock_mode);
 80001f8:	4b13      	ldr	r3, [pc, #76]	; (8000248 <main+0x74>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f9f9 	bl	80005f4 <DS3231_GetClockStatus>
 8000202:	4603      	mov	r3, r0
 8000204:	461a      	mov	r2, r3
 8000206:	4b10      	ldr	r3, [pc, #64]	; (8000248 <main+0x74>)
 8000208:	701a      	strb	r2, [r3, #0]
		real_time = DS3231_ReadRealTime();
 800020a:	f000 f94b 	bl	80004a4 <DS3231_ReadRealTime>
 800020e:	4602      	mov	r2, r0
 8000210:	4b0e      	ldr	r3, [pc, #56]	; (800024c <main+0x78>)
 8000212:	4611      	mov	r1, r2
 8000214:	7019      	strb	r1, [r3, #0]
 8000216:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800021a:	7059      	strb	r1, [r3, #1]
 800021c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8000220:	709a      	strb	r2, [r3, #2]
		if (real_time.seconds != old_seconds)
 8000222:	4b0a      	ldr	r3, [pc, #40]	; (800024c <main+0x78>)
 8000224:	789a      	ldrb	r2, [r3, #2]
 8000226:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <main+0x7c>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	429a      	cmp	r2, r3
 800022c:	d0e4      	beq.n	80001f8 <main+0x24>
		{
			MAX7219_DisplayTime(real_time, alarm_time, clock_mode, setting_mode);
 800022e:	4b06      	ldr	r3, [pc, #24]	; (8000248 <main+0x74>)
 8000230:	781a      	ldrb	r2, [r3, #0]
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <main+0x80>)
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	4903      	ldr	r1, [pc, #12]	; (8000244 <main+0x70>)
 8000238:	4804      	ldr	r0, [pc, #16]	; (800024c <main+0x78>)
 800023a:	6809      	ldr	r1, [r1, #0]
 800023c:	6800      	ldr	r0, [r0, #0]
 800023e:	f000 faa7 	bl	8000790 <MAX7219_DisplayTime>
		clock_mode = DS3231_GetClockStatus(clock_mode);
 8000242:	e7d9      	b.n	80001f8 <main+0x24>
 8000244:	20000050 	.word	0x20000050
 8000248:	20000053 	.word	0x20000053
 800024c:	2000004c 	.word	0x2000004c
 8000250:	20000055 	.word	0x20000055
 8000254:	20000054 	.word	0x20000054

08000258 <I2C1_Init>:
}

/********* I2C & DS3231 ***************************************************************************/

void I2C1_Init()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStructure;
	I2C_InitTypeDef		I2C_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800025e:	2101      	movs	r1, #1
 8000260:	2002      	movs	r0, #2
 8000262:	f001 fc7d 	bl	8001b60 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000266:	2302      	movs	r3, #2
 8000268:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800026a:	2301      	movs	r3, #1
 800026c:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_OType = GPIO_PuPd_UP;
 800026e:	2301      	movs	r3, #1
 8000270:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000272:	2302      	movs	r3, #2
 8000274:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8000276:	f44f 7340 	mov.w	r3, #768	; 0x300
 800027a:	613b      	str	r3, [r7, #16]
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_I2C1);
 800027c:	2204      	movs	r2, #4
 800027e:	2108      	movs	r1, #8
 8000280:	4816      	ldr	r0, [pc, #88]	; (80002dc <I2C1_Init+0x84>)
 8000282:	f001 f9b4 	bl	80015ee <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 8000286:	2204      	movs	r2, #4
 8000288:	2109      	movs	r1, #9
 800028a:	4814      	ldr	r0, [pc, #80]	; (80002dc <I2C1_Init+0x84>)
 800028c:	f001 f9af 	bl	80015ee <GPIO_PinAFConfig>
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000290:	f107 0310 	add.w	r3, r7, #16
 8000294:	4619      	mov	r1, r3
 8000296:	4811      	ldr	r0, [pc, #68]	; (80002dc <I2C1_Init+0x84>)
 8000298:	f001 f8e2 	bl	8001460 <GPIO_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 800029c:	2101      	movs	r1, #1
 800029e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80002a2:	f001 fc7d 	bl	8001ba0 <RCC_APB1PeriphClockCmd>
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80002a6:	2300      	movs	r3, #0
 80002a8:	80bb      	strh	r3, [r7, #4]
	I2C_InitStructure.I2C_ClockSpeed = 400000;
 80002aa:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <I2C1_Init+0x88>)
 80002ac:	603b      	str	r3, [r7, #0]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80002ae:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80002b2:	80fb      	strh	r3, [r7, #6]
	I2C_InitStructure.I2C_Ack = ENABLE;
 80002b4:	2301      	movs	r3, #1
 80002b6:	817b      	strh	r3, [r7, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80002b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002bc:	81bb      	strh	r3, [r7, #12]
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 80002be:	2300      	movs	r3, #0
 80002c0:	813b      	strh	r3, [r7, #8]
	I2C_Init(I2C1, &I2C_InitStructure);
 80002c2:	463b      	mov	r3, r7
 80002c4:	4619      	mov	r1, r3
 80002c6:	4807      	ldr	r0, [pc, #28]	; (80002e4 <I2C1_Init+0x8c>)
 80002c8:	f001 f9da 	bl	8001680 <I2C_Init>
	I2C_Cmd(I2C1, ENABLE);
 80002cc:	2101      	movs	r1, #1
 80002ce:	4805      	ldr	r0, [pc, #20]	; (80002e4 <I2C1_Init+0x8c>)
 80002d0:	f001 fa98 	bl	8001804 <I2C_Cmd>
}
 80002d4:	bf00      	nop
 80002d6:	3718      	adds	r7, #24
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40020400 	.word	0x40020400
 80002e0:	00061a80 	.word	0x00061a80
 80002e4:	40005400 	.word	0x40005400

080002e8 <I2Cx_SendData>:

void I2Cx_SendData(I2C_TypeDef * I2Cx, uint8_t SlaveAddress, uint8_t RegisterAddress, uint8_t data)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	4608      	mov	r0, r1
 80002f2:	4611      	mov	r1, r2
 80002f4:	461a      	mov	r2, r3
 80002f6:	4603      	mov	r3, r0
 80002f8:	70fb      	strb	r3, [r7, #3]
 80002fa:	460b      	mov	r3, r1
 80002fc:	70bb      	strb	r3, [r7, #2]
 80002fe:	4613      	mov	r3, r2
 8000300:	707b      	strb	r3, [r7, #1]
	// I2C start
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8000302:	bf00      	nop
 8000304:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000308:	6878      	ldr	r0, [r7, #4]
 800030a:	f001 fb47 	bl	800199c <I2C_GetFlagStatus>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d1f7      	bne.n	8000304 <I2Cx_SendData+0x1c>
	I2C_GenerateSTART(I2Cx, ENABLE);
 8000314:	2101      	movs	r1, #1
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f001 fa94 	bl	8001844 <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
 800031c:	bf00      	nop
 800031e:	491c      	ldr	r1, [pc, #112]	; (8000390 <I2Cx_SendData+0xa8>)
 8000320:	6878      	ldr	r0, [r7, #4]
 8000322:	f001 fb0b 	bl	800193c <I2C_CheckEvent>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0f8      	beq.n	800031e <I2Cx_SendData+0x36>
	// I2C address phase
	I2C_Send7bitAddress(I2Cx, SlaveAddress << 1, I2C_Direction_Transmitter);
 800032c:	78fb      	ldrb	r3, [r7, #3]
 800032e:	005b      	lsls	r3, r3, #1
 8000330:	b2db      	uxtb	r3, r3
 8000332:	2200      	movs	r2, #0
 8000334:	4619      	mov	r1, r3
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f001 fac4 	bl	80018c4 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 800033c:	bf00      	nop
 800033e:	4915      	ldr	r1, [pc, #84]	; (8000394 <I2Cx_SendData+0xac>)
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f001 fafb 	bl	800193c <I2C_CheckEvent>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f8      	beq.n	800033e <I2Cx_SendData+0x56>
	I2C_SendData(I2Cx, RegisterAddress);
 800034c:	78bb      	ldrb	r3, [r7, #2]
 800034e:	4619      	mov	r1, r3
 8000350:	6878      	ldr	r0, [r7, #4]
 8000352:	f001 fad5 	bl	8001900 <I2C_SendData>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8000356:	bf00      	nop
 8000358:	490f      	ldr	r1, [pc, #60]	; (8000398 <I2Cx_SendData+0xb0>)
 800035a:	6878      	ldr	r0, [r7, #4]
 800035c:	f001 faee 	bl	800193c <I2C_CheckEvent>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0f8      	beq.n	8000358 <I2Cx_SendData+0x70>
	I2C_SendData(I2Cx, data);
 8000366:	787b      	ldrb	r3, [r7, #1]
 8000368:	4619      	mov	r1, r3
 800036a:	6878      	ldr	r0, [r7, #4]
 800036c:	f001 fac8 	bl	8001900 <I2C_SendData>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8000370:	bf00      	nop
 8000372:	4909      	ldr	r1, [pc, #36]	; (8000398 <I2Cx_SendData+0xb0>)
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f001 fae1 	bl	800193c <I2C_CheckEvent>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f8      	beq.n	8000372 <I2Cx_SendData+0x8a>
	I2C_GenerateSTOP(I2Cx, ENABLE);
 8000380:	2101      	movs	r1, #1
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f001 fa7e 	bl	8001884 <I2C_GenerateSTOP>
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	00030001 	.word	0x00030001
 8000394:	00070082 	.word	0x00070082
 8000398:	00070084 	.word	0x00070084

0800039c <I2Cx_ReceiveData>:

uint8_t I2Cx_ReceiveData(I2C_TypeDef * I2Cx, uint8_t SlaveAddress, uint8_t RegisterAddress)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	70fb      	strb	r3, [r7, #3]
 80003a8:	4613      	mov	r3, r2
 80003aa:	70bb      	strb	r3, [r7, #2]
	uint8_t data;

	// I2C start
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 80003ac:	bf00      	nop
 80003ae:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	f001 faf2 	bl	800199c <I2C_GetFlagStatus>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d1f7      	bne.n	80003ae <I2Cx_ReceiveData+0x12>
	I2C_GenerateSTART(I2Cx, ENABLE);
 80003be:	2101      	movs	r1, #1
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f001 fa3f 	bl	8001844 <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
 80003c6:	bf00      	nop
 80003c8:	4931      	ldr	r1, [pc, #196]	; (8000490 <I2Cx_ReceiveData+0xf4>)
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f001 fab6 	bl	800193c <I2C_CheckEvent>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d0f8      	beq.n	80003c8 <I2Cx_ReceiveData+0x2c>
	// I2C address phase
	I2C_Send7bitAddress(I2Cx, SlaveAddress << 1, I2C_Direction_Transmitter);
 80003d6:	78fb      	ldrb	r3, [r7, #3]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	2200      	movs	r2, #0
 80003de:	4619      	mov	r1, r3
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f001 fa6f 	bl	80018c4 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 80003e6:	bf00      	nop
 80003e8:	492a      	ldr	r1, [pc, #168]	; (8000494 <I2Cx_ReceiveData+0xf8>)
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f001 faa6 	bl	800193c <I2C_CheckEvent>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0f8      	beq.n	80003e8 <I2Cx_ReceiveData+0x4c>
	// I2C send register address
	I2C_SendData(I2Cx, RegisterAddress);
 80003f6:	78bb      	ldrb	r3, [r7, #2]
 80003f8:	4619      	mov	r1, r3
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f001 fa80 	bl	8001900 <I2C_SendData>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8000400:	bf00      	nop
 8000402:	4925      	ldr	r1, [pc, #148]	; (8000498 <I2Cx_ReceiveData+0xfc>)
 8000404:	6878      	ldr	r0, [r7, #4]
 8000406:	f001 fa99 	bl	800193c <I2C_CheckEvent>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d0f8      	beq.n	8000402 <I2Cx_ReceiveData+0x66>
	// I2C stop
	I2C_GenerateSTOP(I2Cx, ENABLE);
 8000410:	2101      	movs	r1, #1
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f001 fa36 	bl	8001884 <I2C_GenerateSTOP>

	// I2C start
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8000418:	bf00      	nop
 800041a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f001 fabc 	bl	800199c <I2C_GetFlagStatus>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d1f7      	bne.n	800041a <I2Cx_ReceiveData+0x7e>
	I2C_GenerateSTART(I2Cx, ENABLE);
 800042a:	2101      	movs	r1, #1
 800042c:	6878      	ldr	r0, [r7, #4]
 800042e:	f001 fa09 	bl	8001844 <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
 8000432:	bf00      	nop
 8000434:	4916      	ldr	r1, [pc, #88]	; (8000490 <I2Cx_ReceiveData+0xf4>)
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f001 fa80 	bl	800193c <I2C_CheckEvent>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d0f8      	beq.n	8000434 <I2Cx_ReceiveData+0x98>
	// I2C address phase
	I2C_Send7bitAddress(I2Cx, SlaveAddress << 1, I2C_Direction_Receiver);
 8000442:	78fb      	ldrb	r3, [r7, #3]
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2201      	movs	r2, #1
 800044a:	4619      	mov	r1, r3
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f001 fa39 	bl	80018c4 <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8000452:	bf00      	nop
 8000454:	4911      	ldr	r1, [pc, #68]	; (800049c <I2Cx_ReceiveData+0x100>)
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f001 fa70 	bl	800193c <I2C_CheckEvent>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d0f8      	beq.n	8000454 <I2Cx_ReceiveData+0xb8>
	// I2C receive data
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));
 8000462:	bf00      	nop
 8000464:	490e      	ldr	r1, [pc, #56]	; (80004a0 <I2Cx_ReceiveData+0x104>)
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f001 fa68 	bl	800193c <I2C_CheckEvent>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0f8      	beq.n	8000464 <I2Cx_ReceiveData+0xc8>
	data = I2C_ReceiveData(I2Cx);
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	f001 fa54 	bl	8001920 <I2C_ReceiveData>
 8000478:	4603      	mov	r3, r0
 800047a:	73fb      	strb	r3, [r7, #15]
	// I2C stop
	I2C_GenerateSTOP(I2Cx, ENABLE);
 800047c:	2101      	movs	r1, #1
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f001 fa00 	bl	8001884 <I2C_GenerateSTOP>

	return data;
 8000484:	7bfb      	ldrb	r3, [r7, #15]
}
 8000486:	4618      	mov	r0, r3
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	00030001 	.word	0x00030001
 8000494:	00070082 	.word	0x00070082
 8000498:	00070084 	.word	0x00070084
 800049c:	00030002 	.word	0x00030002
 80004a0:	00030040 	.word	0x00030040

080004a4 <DS3231_ReadRealTime>:

tim_t DS3231_ReadRealTime()
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
	uint8_t temp;
	tim_t time;

	temp = I2Cx_ReceiveData(I2C1, DS3231_ADDRESS, HOURS_ADDRESS);
 80004aa:	2202      	movs	r2, #2
 80004ac:	2168      	movs	r1, #104	; 0x68
 80004ae:	482b      	ldr	r0, [pc, #172]	; (800055c <DS3231_ReadRealTime+0xb8>)
 80004b0:	f7ff ff74 	bl	800039c <I2Cx_ReceiveData>
 80004b4:	4603      	mov	r3, r0
 80004b6:	71fb      	strb	r3, [r7, #7]
	time.hours = (temp >> 4) * 10 + (temp & 0x0F);
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	091b      	lsrs	r3, r3, #4
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	461a      	mov	r2, r3
 80004c0:	0092      	lsls	r2, r2, #2
 80004c2:	4413      	add	r3, r2
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	f003 030f 	and.w	r3, r3, #15
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	4413      	add	r3, r2
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	703b      	strb	r3, [r7, #0]
	temp = I2Cx_ReceiveData(I2C1, DS3231_ADDRESS, MINUTES_ADDRESS);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2168      	movs	r1, #104	; 0x68
 80004da:	4820      	ldr	r0, [pc, #128]	; (800055c <DS3231_ReadRealTime+0xb8>)
 80004dc:	f7ff ff5e 	bl	800039c <I2Cx_ReceiveData>
 80004e0:	4603      	mov	r3, r0
 80004e2:	71fb      	strb	r3, [r7, #7]
	time.minutes = (temp >> 4) * 10 + (temp & 0x0F);
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	091b      	lsrs	r3, r3, #4
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	461a      	mov	r2, r3
 80004ec:	0092      	lsls	r2, r2, #2
 80004ee:	4413      	add	r3, r2
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	f003 030f 	and.w	r3, r3, #15
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	4413      	add	r3, r2
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	707b      	strb	r3, [r7, #1]
	temp = I2Cx_ReceiveData(I2C1, DS3231_ADDRESS, SECONDS_ADDRESS);
 8000502:	2200      	movs	r2, #0
 8000504:	2168      	movs	r1, #104	; 0x68
 8000506:	4815      	ldr	r0, [pc, #84]	; (800055c <DS3231_ReadRealTime+0xb8>)
 8000508:	f7ff ff48 	bl	800039c <I2Cx_ReceiveData>
 800050c:	4603      	mov	r3, r0
 800050e:	71fb      	strb	r3, [r7, #7]
	time.seconds = (temp >> 4) * 10 + (temp & 0x0F);
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	091b      	lsrs	r3, r3, #4
 8000514:	b2db      	uxtb	r3, r3
 8000516:	461a      	mov	r2, r3
 8000518:	0092      	lsls	r2, r2, #2
 800051a:	4413      	add	r3, r2
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	b2da      	uxtb	r2, r3
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	f003 030f 	and.w	r3, r3, #15
 8000526:	b2db      	uxtb	r3, r3
 8000528:	4413      	add	r3, r2
 800052a:	b2db      	uxtb	r3, r3
 800052c:	70bb      	strb	r3, [r7, #2]

	return time;
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	463a      	mov	r2, r7
 8000532:	6812      	ldr	r2, [r2, #0]
 8000534:	4611      	mov	r1, r2
 8000536:	8019      	strh	r1, [r3, #0]
 8000538:	3302      	adds	r3, #2
 800053a:	0c12      	lsrs	r2, r2, #16
 800053c:	701a      	strb	r2, [r3, #0]
 800053e:	2300      	movs	r3, #0
 8000540:	793a      	ldrb	r2, [r7, #4]
 8000542:	f362 0307 	bfi	r3, r2, #0, #8
 8000546:	797a      	ldrb	r2, [r7, #5]
 8000548:	f362 230f 	bfi	r3, r2, #8, #8
 800054c:	79ba      	ldrb	r2, [r7, #6]
 800054e:	f362 4317 	bfi	r3, r2, #16, #8
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40005400 	.word	0x40005400

08000560 <DS3231_SetAlarmTime>:

void DS3231_SetAlarmTime(tim_t time_alarm)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	I2Cx_SendData(I2C1, DS3231_ADDRESS, 0x0B, ((time_alarm.minutes / 10) << 4) | (time_alarm.minutes % 10));
 8000568:	797b      	ldrb	r3, [r7, #5]
 800056a:	4a20      	ldr	r2, [pc, #128]	; (80005ec <DS3231_SetAlarmTime+0x8c>)
 800056c:	fba2 2303 	umull	r2, r3, r2, r3
 8000570:	08db      	lsrs	r3, r3, #3
 8000572:	b2db      	uxtb	r3, r3
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	b258      	sxtb	r0, r3
 8000578:	797a      	ldrb	r2, [r7, #5]
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <DS3231_SetAlarmTime+0x8c>)
 800057c:	fba3 1302 	umull	r1, r3, r3, r2
 8000580:	08d9      	lsrs	r1, r3, #3
 8000582:	460b      	mov	r3, r1
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	440b      	add	r3, r1
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	b2db      	uxtb	r3, r3
 800058e:	b25b      	sxtb	r3, r3
 8000590:	4303      	orrs	r3, r0
 8000592:	b25b      	sxtb	r3, r3
 8000594:	b2db      	uxtb	r3, r3
 8000596:	220b      	movs	r2, #11
 8000598:	2168      	movs	r1, #104	; 0x68
 800059a:	4815      	ldr	r0, [pc, #84]	; (80005f0 <DS3231_SetAlarmTime+0x90>)
 800059c:	f7ff fea4 	bl	80002e8 <I2Cx_SendData>
	I2Cx_SendData(I2C1, DS3231_ADDRESS, 0x0C, ((time_alarm.hours / 10) << 4) | (time_alarm.hours % 10));
 80005a0:	793b      	ldrb	r3, [r7, #4]
 80005a2:	4a12      	ldr	r2, [pc, #72]	; (80005ec <DS3231_SetAlarmTime+0x8c>)
 80005a4:	fba2 2303 	umull	r2, r3, r2, r3
 80005a8:	08db      	lsrs	r3, r3, #3
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	011b      	lsls	r3, r3, #4
 80005ae:	b258      	sxtb	r0, r3
 80005b0:	793a      	ldrb	r2, [r7, #4]
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <DS3231_SetAlarmTime+0x8c>)
 80005b4:	fba3 1302 	umull	r1, r3, r3, r2
 80005b8:	08d9      	lsrs	r1, r3, #3
 80005ba:	460b      	mov	r3, r1
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	440b      	add	r3, r1
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	b25b      	sxtb	r3, r3
 80005c8:	4303      	orrs	r3, r0
 80005ca:	b25b      	sxtb	r3, r3
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	220c      	movs	r2, #12
 80005d0:	2168      	movs	r1, #104	; 0x68
 80005d2:	4807      	ldr	r0, [pc, #28]	; (80005f0 <DS3231_SetAlarmTime+0x90>)
 80005d4:	f7ff fe88 	bl	80002e8 <I2Cx_SendData>
	I2Cx_SendData(I2C1, DS3231_ADDRESS, 0x0D, (1 << 7));
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	220d      	movs	r2, #13
 80005dc:	2168      	movs	r1, #104	; 0x68
 80005de:	4804      	ldr	r0, [pc, #16]	; (80005f0 <DS3231_SetAlarmTime+0x90>)
 80005e0:	f7ff fe82 	bl	80002e8 <I2Cx_SendData>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	cccccccd 	.word	0xcccccccd
 80005f0:	40005400 	.word	0x40005400

080005f4 <DS3231_GetClockStatus>:

clock_mode_t DS3231_GetClockStatus(clock_mode_t clock_mod)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	if (clock_mod == wait_alarm)
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b02      	cmp	r3, #2
 8000602:	d118      	bne.n	8000636 <DS3231_GetClockStatus+0x42>
	{
		data = I2Cx_ReceiveData(I2C1, DS3231_ADDRESS, 0x0F);
 8000604:	220f      	movs	r2, #15
 8000606:	2168      	movs	r1, #104	; 0x68
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <DS3231_GetClockStatus+0x4c>)
 800060a:	f7ff fec7 	bl	800039c <I2Cx_ReceiveData>
 800060e:	4603      	mov	r3, r0
 8000610:	73fb      	strb	r3, [r7, #15]
		I2Cx_SendData(I2C1, DS3231_ADDRESS, 0x0F, data & ~0x02);
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	f023 0302 	bic.w	r3, r3, #2
 8000618:	b2db      	uxtb	r3, r3
 800061a:	220f      	movs	r2, #15
 800061c:	2168      	movs	r1, #104	; 0x68
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <DS3231_GetClockStatus+0x4c>)
 8000620:	f7ff fe62 	bl	80002e8 <I2Cx_SendData>
		if ((data & 0x02) != 0)
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	2b00      	cmp	r3, #0
 800062c:	d003      	beq.n	8000636 <DS3231_GetClockStatus+0x42>
		{
			clock_mod = alarming;
 800062e:	2303      	movs	r3, #3
 8000630:	71fb      	strb	r3, [r7, #7]
			return clock_mod;
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	e000      	b.n	8000638 <DS3231_GetClockStatus+0x44>
		}
	}

	return clock_mod;
 8000636:	79fb      	ldrb	r3, [r7, #7]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40005400 	.word	0x40005400

08000644 <SPI2_MasterInit>:

/********* SPI & MAX7219 ***************************************************************************/

void SPI2_MasterInit()
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Init_Structure;
	SPI_InitTypeDef SPI_Init_Structure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800064a:	2101      	movs	r1, #1
 800064c:	2002      	movs	r0, #2
 800064e:	f001 fa87 	bl	8001b60 <RCC_AHB1PeriphClockCmd>
	GPIO_Init_Structure.GPIO_Mode = GPIO_Mode_AF;
 8000652:	2302      	movs	r3, #2
 8000654:	773b      	strb	r3, [r7, #28]
	GPIO_Init_Structure.GPIO_OType = GPIO_OType_PP;
 8000656:	2300      	movs	r3, #0
 8000658:	77bb      	strb	r3, [r7, #30]
	GPIO_Init_Structure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	77fb      	strb	r3, [r7, #31]
	GPIO_Init_Structure.GPIO_Speed = GPIO_Speed_50MHz;
 800065e:	2302      	movs	r3, #2
 8000660:	777b      	strb	r3, [r7, #29]

	GPIO_Init_Structure.GPIO_Pin = SPI2_SCK_PIN;
 8000662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000666:	61bb      	str	r3, [r7, #24]
	GPIO_PinAFConfig(SPI2_GPIO_PORT, GPIO_PinSource13, GPIO_AF_SPI2);
 8000668:	2205      	movs	r2, #5
 800066a:	210d      	movs	r1, #13
 800066c:	4826      	ldr	r0, [pc, #152]	; (8000708 <SPI2_MasterInit+0xc4>)
 800066e:	f000 ffbe 	bl	80015ee <GPIO_PinAFConfig>
	GPIO_Init(SPI2_GPIO_PORT, &GPIO_Init_Structure);
 8000672:	f107 0318 	add.w	r3, r7, #24
 8000676:	4619      	mov	r1, r3
 8000678:	4823      	ldr	r0, [pc, #140]	; (8000708 <SPI2_MasterInit+0xc4>)
 800067a:	f000 fef1 	bl	8001460 <GPIO_Init>

	GPIO_Init_Structure.GPIO_Pin = SPI2_MOSI_PIN;
 800067e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000682:	61bb      	str	r3, [r7, #24]
	GPIO_PinAFConfig(SPI2_GPIO_PORT, GPIO_PinSource15, GPIO_AF_SPI2);
 8000684:	2205      	movs	r2, #5
 8000686:	210f      	movs	r1, #15
 8000688:	481f      	ldr	r0, [pc, #124]	; (8000708 <SPI2_MasterInit+0xc4>)
 800068a:	f000 ffb0 	bl	80015ee <GPIO_PinAFConfig>
	GPIO_Init(SPI2_GPIO_PORT, &GPIO_Init_Structure);
 800068e:	f107 0318 	add.w	r3, r7, #24
 8000692:	4619      	mov	r1, r3
 8000694:	481c      	ldr	r0, [pc, #112]	; (8000708 <SPI2_MasterInit+0xc4>)
 8000696:	f000 fee3 	bl	8001460 <GPIO_Init>

	GPIO_Init_Structure.GPIO_Mode = GPIO_Mode_OUT;
 800069a:	2301      	movs	r3, #1
 800069c:	773b      	strb	r3, [r7, #28]
	GPIO_Init_Structure.GPIO_OType = GPIO_OType_PP;
 800069e:	2300      	movs	r3, #0
 80006a0:	77bb      	strb	r3, [r7, #30]
	GPIO_Init_Structure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	77fb      	strb	r3, [r7, #31]
	GPIO_Init_Structure.GPIO_Speed = GPIO_Speed_50MHz;
 80006a6:	2302      	movs	r3, #2
 80006a8:	777b      	strb	r3, [r7, #29]

	GPIO_Init_Structure.GPIO_Pin = SPI2_NSS_PIN;
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	61bb      	str	r3, [r7, #24]
	GPIO_Init(SPI2_GPIO_PORT, &GPIO_Init_Structure);
 80006b0:	f107 0318 	add.w	r3, r7, #24
 80006b4:	4619      	mov	r1, r3
 80006b6:	4814      	ldr	r0, [pc, #80]	; (8000708 <SPI2_MasterInit+0xc4>)
 80006b8:	f000 fed2 	bl	8001460 <GPIO_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 80006bc:	2101      	movs	r1, #1
 80006be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80006c2:	f001 fa6d 	bl	8001ba0 <RCC_APB1PeriphClockCmd>
	SPI_Init_Structure.SPI_Mode = SPI_Mode_Master;
 80006c6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80006ca:	80fb      	strh	r3, [r7, #6]
	SPI_Init_Structure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80006cc:	2300      	movs	r3, #0
 80006ce:	80bb      	strh	r3, [r7, #4]
	SPI_Init_Structure.SPI_CPOL = SPI_CPOL_Low;
 80006d0:	2300      	movs	r3, #0
 80006d2:	817b      	strh	r3, [r7, #10]
	SPI_Init_Structure.SPI_CPHA = SPI_CPHA_1Edge;
 80006d4:	2300      	movs	r3, #0
 80006d6:	81bb      	strh	r3, [r7, #12]
	SPI_Init_Structure.SPI_DataSize = SPI_DataSize_16b;
 80006d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006dc:	813b      	strh	r3, [r7, #8]
	SPI_Init_Structure.SPI_FirstBit = SPI_FirstBit_MSB;
 80006de:	2300      	movs	r3, #0
 80006e0:	827b      	strh	r3, [r7, #18]
	SPI_Init_Structure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32;
 80006e2:	2320      	movs	r3, #32
 80006e4:	823b      	strh	r3, [r7, #16]
	SPI_Init_Structure.SPI_NSS = SPI_NSS_Soft;
 80006e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006ea:	81fb      	strh	r3, [r7, #14]
	SPI_Init(SPI2,  &SPI_Init_Structure);
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4619      	mov	r1, r3
 80006f0:	4806      	ldr	r0, [pc, #24]	; (800070c <SPI2_MasterInit+0xc8>)
 80006f2:	f001 fa95 	bl	8001c20 <SPI_Init>
	SPI_Cmd(SPI2, ENABLE);
 80006f6:	2101      	movs	r1, #1
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <SPI2_MasterInit+0xc8>)
 80006fa:	f001 fad5 	bl	8001ca8 <SPI_Cmd>
}
 80006fe:	bf00      	nop
 8000700:	3720      	adds	r7, #32
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40020400 	.word	0x40020400
 800070c:	40003800 	.word	0x40003800

08000710 <SPI_Send_Data>:

void SPI_Send_Data(SPI_TypeDef * SPIx, uint16_t data)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	807b      	strh	r3, [r7, #2]
	GPIO_ResetBits(SPI2_GPIO_PORT, SPI2_NSS_PIN);
 800071c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <SPI_Send_Data+0x44>)
 8000722:	f000 ff55 	bl	80015d0 <GPIO_ResetBits>
	SPI_I2S_SendData(SPI2, data);
 8000726:	887b      	ldrh	r3, [r7, #2]
 8000728:	4619      	mov	r1, r3
 800072a:	480b      	ldr	r0, [pc, #44]	; (8000758 <SPI_Send_Data+0x48>)
 800072c:	f001 fadc 	bl	8001ce8 <SPI_I2S_SendData>
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) == 1);
 8000730:	bf00      	nop
 8000732:	2180      	movs	r1, #128	; 0x80
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <SPI_Send_Data+0x48>)
 8000736:	f001 fae6 	bl	8001d06 <SPI_I2S_GetFlagStatus>
 800073a:	4603      	mov	r3, r0
 800073c:	2b01      	cmp	r3, #1
 800073e:	d0f8      	beq.n	8000732 <SPI_Send_Data+0x22>
	GPIO_SetBits(SPI2_GPIO_PORT, SPI2_NSS_PIN);
 8000740:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <SPI_Send_Data+0x44>)
 8000746:	f000 ff34 	bl	80015b2 <GPIO_SetBits>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40020400 	.word	0x40020400
 8000758:	40003800 	.word	0x40003800

0800075c <MAX7219_Init>:

void MAX7219_Init()
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	// normal operation
	SPI_Send_Data(SPI2, (0x0C << 8) | 0x01);
 8000760:	f640 4101 	movw	r1, #3073	; 0xc01
 8000764:	4809      	ldr	r0, [pc, #36]	; (800078c <MAX7219_Init+0x30>)
 8000766:	f7ff ffd3 	bl	8000710 <SPI_Send_Data>
	// no decode all digits
	SPI_Send_Data(SPI2, (0x09 << 8) | 0x00);
 800076a:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800076e:	4807      	ldr	r0, [pc, #28]	; (800078c <MAX7219_Init+0x30>)
 8000770:	f7ff ffce 	bl	8000710 <SPI_Send_Data>
	// intensity 15/32
	SPI_Send_Data(SPI2, (0x0A << 8) | 0x07);
 8000774:	f640 2107 	movw	r1, #2567	; 0xa07
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MAX7219_Init+0x30>)
 800077a:	f7ff ffc9 	bl	8000710 <SPI_Send_Data>
	// display all digits
	SPI_Send_Data(SPI2, (0x0B << 8) | 0x07);
 800077e:	f640 3107 	movw	r1, #2823	; 0xb07
 8000782:	4802      	ldr	r0, [pc, #8]	; (800078c <MAX7219_Init+0x30>)
 8000784:	f7ff ffc4 	bl	8000710 <SPI_Send_Data>
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40003800 	.word	0x40003800

08000790 <MAX7219_DisplayTime>:

void MAX7219_DisplayTime(tim_t real_tim, tim_t tim_alarm, clock_mode_t clk_mod, setting_mode_t sett_mod)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	4611      	mov	r1, r2
 800079c:	461a      	mov	r2, r3
 800079e:	460b      	mov	r3, r1
 80007a0:	71fb      	strb	r3, [r7, #7]
 80007a2:	4613      	mov	r3, r2
 80007a4:	71bb      	strb	r3, [r7, #6]
	switch (clock_mode)
 80007a6:	4b9a      	ldr	r3, [pc, #616]	; (8000a10 <MAX7219_DisplayTime+0x280>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	f200 82f6 	bhi.w	8000d9c <MAX7219_DisplayTime+0x60c>
 80007b0:	a201      	add	r2, pc, #4	; (adr r2, 80007b8 <MAX7219_DisplayTime+0x28>)
 80007b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b6:	bf00      	nop
 80007b8:	080007c9 	.word	0x080007c9
 80007bc:	08000897 	.word	0x08000897
 80007c0:	08000b95 	.word	0x08000b95
 80007c4:	08000c71 	.word	0x08000c71
	{
		case normal:
		{
			SPI_Send_Data(SPI2, (8 << 8) | max7219_code[real_tim.hours / 10]);
 80007c8:	7b3b      	ldrb	r3, [r7, #12]
 80007ca:	4a92      	ldr	r2, [pc, #584]	; (8000a14 <MAX7219_DisplayTime+0x284>)
 80007cc:	fba2 2303 	umull	r2, r3, r2, r3
 80007d0:	08db      	lsrs	r3, r3, #3
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b90      	ldr	r3, [pc, #576]	; (8000a18 <MAX7219_DisplayTime+0x288>)
 80007d8:	5c9b      	ldrb	r3, [r3, r2]
 80007da:	b21b      	sxth	r3, r3
 80007dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	4619      	mov	r1, r3
 80007e6:	488d      	ldr	r0, [pc, #564]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 80007e8:	f7ff ff92 	bl	8000710 <SPI_Send_Data>
			SPI_Send_Data(SPI2, (7 << 8) | max7219_code[real_tim.hours % 10]);
 80007ec:	7b3a      	ldrb	r2, [r7, #12]
 80007ee:	4b89      	ldr	r3, [pc, #548]	; (8000a14 <MAX7219_DisplayTime+0x284>)
 80007f0:	fba3 1302 	umull	r1, r3, r3, r2
 80007f4:	08d9      	lsrs	r1, r3, #3
 80007f6:	460b      	mov	r3, r1
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	440b      	add	r3, r1
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	1ad3      	subs	r3, r2, r3
 8000800:	b2db      	uxtb	r3, r3
 8000802:	461a      	mov	r2, r3
 8000804:	4b84      	ldr	r3, [pc, #528]	; (8000a18 <MAX7219_DisplayTime+0x288>)
 8000806:	5c9b      	ldrb	r3, [r3, r2]
 8000808:	b21b      	sxth	r3, r3
 800080a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800080e:	b21b      	sxth	r3, r3
 8000810:	b29b      	uxth	r3, r3
 8000812:	4619      	mov	r1, r3
 8000814:	4881      	ldr	r0, [pc, #516]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 8000816:	f7ff ff7b 	bl	8000710 <SPI_Send_Data>
			SPI_Send_Data(SPI2, (6 << 8) | 0x01);
 800081a:	f240 6101 	movw	r1, #1537	; 0x601
 800081e:	487f      	ldr	r0, [pc, #508]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 8000820:	f7ff ff76 	bl	8000710 <SPI_Send_Data>
			SPI_Send_Data(SPI2, (5 << 8) | max7219_code[real_tim.minutes / 10]);
 8000824:	7b7b      	ldrb	r3, [r7, #13]
 8000826:	4a7b      	ldr	r2, [pc, #492]	; (8000a14 <MAX7219_DisplayTime+0x284>)
 8000828:	fba2 2303 	umull	r2, r3, r2, r3
 800082c:	08db      	lsrs	r3, r3, #3
 800082e:	b2db      	uxtb	r3, r3
 8000830:	461a      	mov	r2, r3
 8000832:	4b79      	ldr	r3, [pc, #484]	; (8000a18 <MAX7219_DisplayTime+0x288>)
 8000834:	5c9b      	ldrb	r3, [r3, r2]
 8000836:	b21b      	sxth	r3, r3
 8000838:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800083c:	b21b      	sxth	r3, r3
 800083e:	b29b      	uxth	r3, r3
 8000840:	4619      	mov	r1, r3
 8000842:	4876      	ldr	r0, [pc, #472]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 8000844:	f7ff ff64 	bl	8000710 <SPI_Send_Data>
			SPI_Send_Data(SPI2, (4 << 8) | max7219_code[real_tim.minutes % 10]);
 8000848:	7b7a      	ldrb	r2, [r7, #13]
 800084a:	4b72      	ldr	r3, [pc, #456]	; (8000a14 <MAX7219_DisplayTime+0x284>)
 800084c:	fba3 1302 	umull	r1, r3, r3, r2
 8000850:	08d9      	lsrs	r1, r3, #3
 8000852:	460b      	mov	r3, r1
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	440b      	add	r3, r1
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	b2db      	uxtb	r3, r3
 800085e:	461a      	mov	r2, r3
 8000860:	4b6d      	ldr	r3, [pc, #436]	; (8000a18 <MAX7219_DisplayTime+0x288>)
 8000862:	5c9b      	ldrb	r3, [r3, r2]
 8000864:	b21b      	sxth	r3, r3
 8000866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800086a:	b21b      	sxth	r3, r3
 800086c:	b29b      	uxth	r3, r3
 800086e:	4619      	mov	r1, r3
 8000870:	486a      	ldr	r0, [pc, #424]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 8000872:	f7ff ff4d 	bl	8000710 <SPI_Send_Data>
			SPI_Send_Data(SPI2, (3 << 8) | 0);
 8000876:	f44f 7140 	mov.w	r1, #768	; 0x300
 800087a:	4868      	ldr	r0, [pc, #416]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 800087c:	f7ff ff48 	bl	8000710 <SPI_Send_Data>
			SPI_Send_Data(SPI2, (2 << 8) | 0);
 8000880:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000884:	4865      	ldr	r0, [pc, #404]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 8000886:	f7ff ff43 	bl	8000710 <SPI_Send_Data>
			SPI_Send_Data(SPI2, (1 << 8) | 0);
 800088a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088e:	4863      	ldr	r0, [pc, #396]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 8000890:	f7ff ff3e 	bl	8000710 <SPI_Send_Data>
			break;
 8000894:	e283      	b.n	8000d9e <MAX7219_DisplayTime+0x60e>
		}
		case alarm_setting:
		{
			if (setting_mode == hours_setting)
 8000896:	4b62      	ldr	r3, [pc, #392]	; (8000a20 <MAX7219_DisplayTime+0x290>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	f040 80c2 	bne.w	8000a24 <MAX7219_DisplayTime+0x294>
			{
				SPI_Send_Data(SPI2, (0x0A << 8) | 0x0F);
 80008a0:	f640 210f 	movw	r1, #2575	; 0xa0f
 80008a4:	485d      	ldr	r0, [pc, #372]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 80008a6:	f7ff ff33 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (8 << 8) | max7219_code[tim_alarm.hours / 10]);
 80008aa:	7a3b      	ldrb	r3, [r7, #8]
 80008ac:	4a59      	ldr	r2, [pc, #356]	; (8000a14 <MAX7219_DisplayTime+0x284>)
 80008ae:	fba2 2303 	umull	r2, r3, r2, r3
 80008b2:	08db      	lsrs	r3, r3, #3
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b57      	ldr	r3, [pc, #348]	; (8000a18 <MAX7219_DisplayTime+0x288>)
 80008ba:	5c9b      	ldrb	r3, [r3, r2]
 80008bc:	b21b      	sxth	r3, r3
 80008be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	4619      	mov	r1, r3
 80008c8:	4854      	ldr	r0, [pc, #336]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 80008ca:	f7ff ff21 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (7 << 8) | max7219_code[tim_alarm.hours % 10]);
 80008ce:	7a3a      	ldrb	r2, [r7, #8]
 80008d0:	4b50      	ldr	r3, [pc, #320]	; (8000a14 <MAX7219_DisplayTime+0x284>)
 80008d2:	fba3 1302 	umull	r1, r3, r3, r2
 80008d6:	08d9      	lsrs	r1, r3, #3
 80008d8:	460b      	mov	r3, r1
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	440b      	add	r3, r1
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b4c      	ldr	r3, [pc, #304]	; (8000a18 <MAX7219_DisplayTime+0x288>)
 80008e8:	5c9b      	ldrb	r3, [r3, r2]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80008f0:	b21b      	sxth	r3, r3
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	4619      	mov	r1, r3
 80008f6:	4849      	ldr	r0, [pc, #292]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 80008f8:	f7ff ff0a 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (6 << 8) | 0x01);
 80008fc:	f240 6101 	movw	r1, #1537	; 0x601
 8000900:	4846      	ldr	r0, [pc, #280]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 8000902:	f7ff ff05 	bl	8000710 <SPI_Send_Data>
				delay_ms(3);
 8000906:	2003      	movs	r0, #3
 8000908:	f000 fb72 	bl	8000ff0 <delay_ms>
				SPI_Send_Data(SPI2, (8 << 8) | 0x00);
 800090c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000910:	4842      	ldr	r0, [pc, #264]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 8000912:	f7ff fefd 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (7 << 8) | 0x00);
 8000916:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800091a:	4840      	ldr	r0, [pc, #256]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 800091c:	f7ff fef8 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (6 << 8) | 0x00);
 8000920:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000924:	483d      	ldr	r0, [pc, #244]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 8000926:	f7ff fef3 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (5 << 8) | 0x00);
 800092a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800092e:	483b      	ldr	r0, [pc, #236]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 8000930:	f7ff feee 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (4 << 8) | 0x00);
 8000934:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000938:	4838      	ldr	r0, [pc, #224]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 800093a:	f7ff fee9 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (3 << 8) | 0x00);
 800093e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000942:	4836      	ldr	r0, [pc, #216]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 8000944:	f7ff fee4 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (2 << 8) | 0x00);
 8000948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094c:	4833      	ldr	r0, [pc, #204]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 800094e:	f7ff fedf 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (1 << 8) | 0x00);
 8000952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000956:	4831      	ldr	r0, [pc, #196]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 8000958:	f7ff feda 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (0x0A << 8) | 0x01);
 800095c:	f640 2101 	movw	r1, #2561	; 0xa01
 8000960:	482e      	ldr	r0, [pc, #184]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 8000962:	f7ff fed5 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (5 << 8) | max7219_code[tim_alarm.minutes / 10]);
 8000966:	7a7b      	ldrb	r3, [r7, #9]
 8000968:	4a2a      	ldr	r2, [pc, #168]	; (8000a14 <MAX7219_DisplayTime+0x284>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	b2db      	uxtb	r3, r3
 8000972:	461a      	mov	r2, r3
 8000974:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <MAX7219_DisplayTime+0x288>)
 8000976:	5c9b      	ldrb	r3, [r3, r2]
 8000978:	b21b      	sxth	r3, r3
 800097a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800097e:	b21b      	sxth	r3, r3
 8000980:	b29b      	uxth	r3, r3
 8000982:	4619      	mov	r1, r3
 8000984:	4825      	ldr	r0, [pc, #148]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 8000986:	f7ff fec3 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (4 << 8) | max7219_code[tim_alarm.minutes % 10]);
 800098a:	7a7a      	ldrb	r2, [r7, #9]
 800098c:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <MAX7219_DisplayTime+0x284>)
 800098e:	fba3 1302 	umull	r1, r3, r3, r2
 8000992:	08d9      	lsrs	r1, r3, #3
 8000994:	460b      	mov	r3, r1
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	440b      	add	r3, r1
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MAX7219_DisplayTime+0x288>)
 80009a4:	5c9b      	ldrb	r3, [r3, r2]
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ac:	b21b      	sxth	r3, r3
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	4619      	mov	r1, r3
 80009b2:	481a      	ldr	r0, [pc, #104]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 80009b4:	f7ff feac 	bl	8000710 <SPI_Send_Data>
				delay_ms(3);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 fb19 	bl	8000ff0 <delay_ms>
				SPI_Send_Data(SPI2, (8 << 8) | 0x00);
 80009be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c2:	4816      	ldr	r0, [pc, #88]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 80009c4:	f7ff fea4 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (7 << 8) | 0x00);
 80009c8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80009cc:	4813      	ldr	r0, [pc, #76]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 80009ce:	f7ff fe9f 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (6 << 8) | 0x00);
 80009d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80009d6:	4811      	ldr	r0, [pc, #68]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 80009d8:	f7ff fe9a 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (5 << 8) | 0x00);
 80009dc:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80009e0:	480e      	ldr	r0, [pc, #56]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 80009e2:	f7ff fe95 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (4 << 8) | 0x00);
 80009e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ea:	480c      	ldr	r0, [pc, #48]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 80009ec:	f7ff fe90 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (3 << 8) | 0x00);
 80009f0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 80009f6:	f7ff fe8b 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (2 << 8) | 0x00);
 80009fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fe:	4807      	ldr	r0, [pc, #28]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 8000a00:	f7ff fe86 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (1 << 8) | 0x00);
 8000a04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MAX7219_DisplayTime+0x28c>)
 8000a0a:	f7ff fe81 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (4 << 8) | 0x00);
				SPI_Send_Data(SPI2, (3 << 8) | 0x00);
				SPI_Send_Data(SPI2, (2 << 8) | 0x00);
				SPI_Send_Data(SPI2, (1 << 8) | 0x00);
			}
			break;
 8000a0e:	e1c6      	b.n	8000d9e <MAX7219_DisplayTime+0x60e>
 8000a10:	20000053 	.word	0x20000053
 8000a14:	cccccccd 	.word	0xcccccccd
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	40003800 	.word	0x40003800
 8000a20:	20000054 	.word	0x20000054
				SPI_Send_Data(SPI2, (0x0A << 8) | 0x01);
 8000a24:	f640 2101 	movw	r1, #2561	; 0xa01
 8000a28:	488e      	ldr	r0, [pc, #568]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000a2a:	f7ff fe71 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (8 << 8) | max7219_code[tim_alarm.hours / 10]);
 8000a2e:	7a3b      	ldrb	r3, [r7, #8]
 8000a30:	4a8d      	ldr	r2, [pc, #564]	; (8000c68 <MAX7219_DisplayTime+0x4d8>)
 8000a32:	fba2 2303 	umull	r2, r3, r2, r3
 8000a36:	08db      	lsrs	r3, r3, #3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b8b      	ldr	r3, [pc, #556]	; (8000c6c <MAX7219_DisplayTime+0x4dc>)
 8000a3e:	5c9b      	ldrb	r3, [r3, r2]
 8000a40:	b21b      	sxth	r3, r3
 8000a42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a46:	b21b      	sxth	r3, r3
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4885      	ldr	r0, [pc, #532]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000a4e:	f7ff fe5f 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (7 << 8) | max7219_code[tim_alarm.hours % 10]);
 8000a52:	7a3a      	ldrb	r2, [r7, #8]
 8000a54:	4b84      	ldr	r3, [pc, #528]	; (8000c68 <MAX7219_DisplayTime+0x4d8>)
 8000a56:	fba3 1302 	umull	r1, r3, r3, r2
 8000a5a:	08d9      	lsrs	r1, r3, #3
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	440b      	add	r3, r1
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b80      	ldr	r3, [pc, #512]	; (8000c6c <MAX7219_DisplayTime+0x4dc>)
 8000a6c:	5c9b      	ldrb	r3, [r3, r2]
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000a74:	b21b      	sxth	r3, r3
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	4619      	mov	r1, r3
 8000a7a:	487a      	ldr	r0, [pc, #488]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000a7c:	f7ff fe48 	bl	8000710 <SPI_Send_Data>
				delay_ms(3);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 fab5 	bl	8000ff0 <delay_ms>
				SPI_Send_Data(SPI2, (8 << 8) | 0x00);
 8000a86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a8a:	4876      	ldr	r0, [pc, #472]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000a8c:	f7ff fe40 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (7 << 8) | 0x00);
 8000a90:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000a94:	4873      	ldr	r0, [pc, #460]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000a96:	f7ff fe3b 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (6 << 8) | 0x00);
 8000a9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000a9e:	4871      	ldr	r0, [pc, #452]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000aa0:	f7ff fe36 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (5 << 8) | 0x00);
 8000aa4:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000aa8:	486e      	ldr	r0, [pc, #440]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000aaa:	f7ff fe31 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (4 << 8) | 0x00);
 8000aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab2:	486c      	ldr	r0, [pc, #432]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000ab4:	f7ff fe2c 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (3 << 8) | 0x00);
 8000ab8:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000abc:	4869      	ldr	r0, [pc, #420]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000abe:	f7ff fe27 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (2 << 8) | 0x00);
 8000ac2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac6:	4867      	ldr	r0, [pc, #412]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000ac8:	f7ff fe22 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (1 << 8) | 0x00);
 8000acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad0:	4864      	ldr	r0, [pc, #400]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000ad2:	f7ff fe1d 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (0x0A << 8) | 0x0F);
 8000ad6:	f640 210f 	movw	r1, #2575	; 0xa0f
 8000ada:	4862      	ldr	r0, [pc, #392]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000adc:	f7ff fe18 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (5 << 8) | max7219_code[tim_alarm.minutes / 10]);
 8000ae0:	7a7b      	ldrb	r3, [r7, #9]
 8000ae2:	4a61      	ldr	r2, [pc, #388]	; (8000c68 <MAX7219_DisplayTime+0x4d8>)
 8000ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae8:	08db      	lsrs	r3, r3, #3
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b5f      	ldr	r3, [pc, #380]	; (8000c6c <MAX7219_DisplayTime+0x4dc>)
 8000af0:	5c9b      	ldrb	r3, [r3, r2]
 8000af2:	b21b      	sxth	r3, r3
 8000af4:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	4619      	mov	r1, r3
 8000afe:	4859      	ldr	r0, [pc, #356]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000b00:	f7ff fe06 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (4 << 8) | max7219_code[tim_alarm.minutes % 10]);
 8000b04:	7a7a      	ldrb	r2, [r7, #9]
 8000b06:	4b58      	ldr	r3, [pc, #352]	; (8000c68 <MAX7219_DisplayTime+0x4d8>)
 8000b08:	fba3 1302 	umull	r1, r3, r3, r2
 8000b0c:	08d9      	lsrs	r1, r3, #3
 8000b0e:	460b      	mov	r3, r1
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	440b      	add	r3, r1
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b53      	ldr	r3, [pc, #332]	; (8000c6c <MAX7219_DisplayTime+0x4dc>)
 8000b1e:	5c9b      	ldrb	r3, [r3, r2]
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b26:	b21b      	sxth	r3, r3
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	484d      	ldr	r0, [pc, #308]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000b2e:	f7ff fdef 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (6 << 8) | 0x01);
 8000b32:	f240 6101 	movw	r1, #1537	; 0x601
 8000b36:	484b      	ldr	r0, [pc, #300]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000b38:	f7ff fdea 	bl	8000710 <SPI_Send_Data>
				delay_ms(3);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 fa57 	bl	8000ff0 <delay_ms>
				SPI_Send_Data(SPI2, (8 << 8) | 0x00);
 8000b42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b46:	4847      	ldr	r0, [pc, #284]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000b48:	f7ff fde2 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (7 << 8) | 0x00);
 8000b4c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b50:	4844      	ldr	r0, [pc, #272]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000b52:	f7ff fddd 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (6 << 8) | 0x00);
 8000b56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000b5a:	4842      	ldr	r0, [pc, #264]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000b5c:	f7ff fdd8 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (5 << 8) | 0x00);
 8000b60:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000b64:	483f      	ldr	r0, [pc, #252]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000b66:	f7ff fdd3 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (4 << 8) | 0x00);
 8000b6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b6e:	483d      	ldr	r0, [pc, #244]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000b70:	f7ff fdce 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (3 << 8) | 0x00);
 8000b74:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000b78:	483a      	ldr	r0, [pc, #232]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000b7a:	f7ff fdc9 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (2 << 8) | 0x00);
 8000b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b82:	4838      	ldr	r0, [pc, #224]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000b84:	f7ff fdc4 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (1 << 8) | 0x00);
 8000b88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8c:	4835      	ldr	r0, [pc, #212]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000b8e:	f7ff fdbf 	bl	8000710 <SPI_Send_Data>
			break;
 8000b92:	e104      	b.n	8000d9e <MAX7219_DisplayTime+0x60e>
		}
		case wait_alarm:
		{
			SPI_Send_Data(SPI2, (8 << 8) | max7219_code[real_tim.hours / 10]);
 8000b94:	7b3b      	ldrb	r3, [r7, #12]
 8000b96:	4a34      	ldr	r2, [pc, #208]	; (8000c68 <MAX7219_DisplayTime+0x4d8>)
 8000b98:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9c:	08db      	lsrs	r3, r3, #3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <MAX7219_DisplayTime+0x4dc>)
 8000ba4:	5c9b      	ldrb	r3, [r3, r2]
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	482c      	ldr	r0, [pc, #176]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000bb4:	f7ff fdac 	bl	8000710 <SPI_Send_Data>
			SPI_Send_Data(SPI2, (7 << 8) | max7219_code[real_tim.hours % 10]);
 8000bb8:	7b3a      	ldrb	r2, [r7, #12]
 8000bba:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <MAX7219_DisplayTime+0x4d8>)
 8000bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8000bc0:	08d9      	lsrs	r1, r3, #3
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <MAX7219_DisplayTime+0x4dc>)
 8000bd2:	5c9b      	ldrb	r3, [r3, r2]
 8000bd4:	b21b      	sxth	r3, r3
 8000bd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	4619      	mov	r1, r3
 8000be0:	4820      	ldr	r0, [pc, #128]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000be2:	f7ff fd95 	bl	8000710 <SPI_Send_Data>
			SPI_Send_Data(SPI2, (6 << 8) | 0x01);
 8000be6:	f240 6101 	movw	r1, #1537	; 0x601
 8000bea:	481e      	ldr	r0, [pc, #120]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000bec:	f7ff fd90 	bl	8000710 <SPI_Send_Data>
			SPI_Send_Data(SPI2, (5 << 8) | max7219_code[real_tim.minutes / 10]);
 8000bf0:	7b7b      	ldrb	r3, [r7, #13]
 8000bf2:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <MAX7219_DisplayTime+0x4d8>)
 8000bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf8:	08db      	lsrs	r3, r3, #3
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MAX7219_DisplayTime+0x4dc>)
 8000c00:	5c9b      	ldrb	r3, [r3, r2]
 8000c02:	b21b      	sxth	r3, r3
 8000c04:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4815      	ldr	r0, [pc, #84]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000c10:	f7ff fd7e 	bl	8000710 <SPI_Send_Data>
			SPI_Send_Data(SPI2, (4 << 8) | max7219_code[real_tim.minutes % 10]);
 8000c14:	7b7a      	ldrb	r2, [r7, #13]
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MAX7219_DisplayTime+0x4d8>)
 8000c18:	fba3 1302 	umull	r1, r3, r3, r2
 8000c1c:	08d9      	lsrs	r1, r3, #3
 8000c1e:	460b      	mov	r3, r1
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	440b      	add	r3, r1
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MAX7219_DisplayTime+0x4dc>)
 8000c2e:	5c9b      	ldrb	r3, [r3, r2]
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4809      	ldr	r0, [pc, #36]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000c3e:	f7ff fd67 	bl	8000710 <SPI_Send_Data>
			SPI_Send_Data(SPI2, (3 << 8) | 0x80);
 8000c42:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000c46:	4807      	ldr	r0, [pc, #28]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000c48:	f7ff fd62 	bl	8000710 <SPI_Send_Data>
			SPI_Send_Data(SPI2, (2 << 8) | 0x80);
 8000c4c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000c52:	f7ff fd5d 	bl	8000710 <SPI_Send_Data>
			SPI_Send_Data(SPI2, (1 << 8) | 0x80);
 8000c56:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000c5a:	4802      	ldr	r0, [pc, #8]	; (8000c64 <MAX7219_DisplayTime+0x4d4>)
 8000c5c:	f7ff fd58 	bl	8000710 <SPI_Send_Data>
			break;
 8000c60:	e09d      	b.n	8000d9e <MAX7219_DisplayTime+0x60e>
 8000c62:	bf00      	nop
 8000c64:	40003800 	.word	0x40003800
 8000c68:	cccccccd 	.word	0xcccccccd
 8000c6c:	20000000 	.word	0x20000000
		}
		case alarming:
		{
			if ((real_tim.seconds % 2) == 0)
 8000c70:	7bbb      	ldrb	r3, [r7, #14]
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d166      	bne.n	8000d4a <MAX7219_DisplayTime+0x5ba>
			{
				SPI_Send_Data(SPI2, (8 << 8) | max7219_code[real_tim.hours / 10]);
 8000c7c:	7b3b      	ldrb	r3, [r7, #12]
 8000c7e:	4a4a      	ldr	r2, [pc, #296]	; (8000da8 <MAX7219_DisplayTime+0x618>)
 8000c80:	fba2 2303 	umull	r2, r3, r2, r3
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b48      	ldr	r3, [pc, #288]	; (8000dac <MAX7219_DisplayTime+0x61c>)
 8000c8c:	5c9b      	ldrb	r3, [r3, r2]
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4845      	ldr	r0, [pc, #276]	; (8000db0 <MAX7219_DisplayTime+0x620>)
 8000c9c:	f7ff fd38 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (7 << 8) | max7219_code[real_tim.hours % 10]);
 8000ca0:	7b3a      	ldrb	r2, [r7, #12]
 8000ca2:	4b41      	ldr	r3, [pc, #260]	; (8000da8 <MAX7219_DisplayTime+0x618>)
 8000ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca8:	08d9      	lsrs	r1, r3, #3
 8000caa:	460b      	mov	r3, r1
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	440b      	add	r3, r1
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b3c      	ldr	r3, [pc, #240]	; (8000dac <MAX7219_DisplayTime+0x61c>)
 8000cba:	5c9b      	ldrb	r3, [r3, r2]
 8000cbc:	b21b      	sxth	r3, r3
 8000cbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4839      	ldr	r0, [pc, #228]	; (8000db0 <MAX7219_DisplayTime+0x620>)
 8000cca:	f7ff fd21 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (6 << 8) | 0x01);
 8000cce:	f240 6101 	movw	r1, #1537	; 0x601
 8000cd2:	4837      	ldr	r0, [pc, #220]	; (8000db0 <MAX7219_DisplayTime+0x620>)
 8000cd4:	f7ff fd1c 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (5 << 8) | max7219_code[real_tim.minutes / 10]);
 8000cd8:	7b7b      	ldrb	r3, [r7, #13]
 8000cda:	4a33      	ldr	r2, [pc, #204]	; (8000da8 <MAX7219_DisplayTime+0x618>)
 8000cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce0:	08db      	lsrs	r3, r3, #3
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b31      	ldr	r3, [pc, #196]	; (8000dac <MAX7219_DisplayTime+0x61c>)
 8000ce8:	5c9b      	ldrb	r3, [r3, r2]
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	482e      	ldr	r0, [pc, #184]	; (8000db0 <MAX7219_DisplayTime+0x620>)
 8000cf8:	f7ff fd0a 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (4 << 8) | max7219_code[real_tim.minutes % 10]);
 8000cfc:	7b7a      	ldrb	r2, [r7, #13]
 8000cfe:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <MAX7219_DisplayTime+0x618>)
 8000d00:	fba3 1302 	umull	r1, r3, r3, r2
 8000d04:	08d9      	lsrs	r1, r3, #3
 8000d06:	460b      	mov	r3, r1
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <MAX7219_DisplayTime+0x61c>)
 8000d16:	5c9b      	ldrb	r3, [r3, r2]
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	4619      	mov	r1, r3
 8000d24:	4822      	ldr	r0, [pc, #136]	; (8000db0 <MAX7219_DisplayTime+0x620>)
 8000d26:	f7ff fcf3 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (3 << 8) | 0x00);
 8000d2a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000d2e:	4820      	ldr	r0, [pc, #128]	; (8000db0 <MAX7219_DisplayTime+0x620>)
 8000d30:	f7ff fcee 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (2 << 8) | 0x00);
 8000d34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d38:	481d      	ldr	r0, [pc, #116]	; (8000db0 <MAX7219_DisplayTime+0x620>)
 8000d3a:	f7ff fce9 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (1 << 8) | 0x00);
 8000d3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d42:	481b      	ldr	r0, [pc, #108]	; (8000db0 <MAX7219_DisplayTime+0x620>)
 8000d44:	f7ff fce4 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (4 << 8) | 0x00);
				SPI_Send_Data(SPI2, (3 << 8) | 0x00);
				SPI_Send_Data(SPI2, (2 << 8) | 0x00);
				SPI_Send_Data(SPI2, (1 << 8) | 0x00);
			}
			break;
 8000d48:	e029      	b.n	8000d9e <MAX7219_DisplayTime+0x60e>
				SPI_Send_Data(SPI2, (8 << 8) | 0x00);
 8000d4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d4e:	4818      	ldr	r0, [pc, #96]	; (8000db0 <MAX7219_DisplayTime+0x620>)
 8000d50:	f7ff fcde 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (7 << 8) | 0x00);
 8000d54:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000d58:	4815      	ldr	r0, [pc, #84]	; (8000db0 <MAX7219_DisplayTime+0x620>)
 8000d5a:	f7ff fcd9 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (6 << 8) | 0x00);
 8000d5e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000d62:	4813      	ldr	r0, [pc, #76]	; (8000db0 <MAX7219_DisplayTime+0x620>)
 8000d64:	f7ff fcd4 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (5 << 8) | 0x00);
 8000d68:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000d6c:	4810      	ldr	r0, [pc, #64]	; (8000db0 <MAX7219_DisplayTime+0x620>)
 8000d6e:	f7ff fccf 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (4 << 8) | 0x00);
 8000d72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d76:	480e      	ldr	r0, [pc, #56]	; (8000db0 <MAX7219_DisplayTime+0x620>)
 8000d78:	f7ff fcca 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (3 << 8) | 0x00);
 8000d7c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <MAX7219_DisplayTime+0x620>)
 8000d82:	f7ff fcc5 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (2 << 8) | 0x00);
 8000d86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8a:	4809      	ldr	r0, [pc, #36]	; (8000db0 <MAX7219_DisplayTime+0x620>)
 8000d8c:	f7ff fcc0 	bl	8000710 <SPI_Send_Data>
				SPI_Send_Data(SPI2, (1 << 8) | 0x00);
 8000d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d94:	4806      	ldr	r0, [pc, #24]	; (8000db0 <MAX7219_DisplayTime+0x620>)
 8000d96:	f7ff fcbb 	bl	8000710 <SPI_Send_Data>
			break;
 8000d9a:	e000      	b.n	8000d9e <MAX7219_DisplayTime+0x60e>
		}
		default:
			break;
 8000d9c:	bf00      	nop
	}
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	cccccccd 	.word	0xcccccccd
 8000dac:	20000000 	.word	0x20000000
 8000db0:	40003800 	.word	0x40003800

08000db4 <BUTTON_Init>:

/********* BUTTON *******************************************************************************/

void BUTTON_Init()
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000dba:	2101      	movs	r1, #1
 8000dbc:	2004      	movs	r0, #4
 8000dbe:	f000 fecf 	bl	8001b60 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
 8000dce:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000dd2:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4619      	mov	r1, r3
 8000dda:	481e      	ldr	r0, [pc, #120]	; (8000e54 <BUTTON_Init+0xa0>)
 8000ddc:	f000 fb40 	bl	8001460 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000de0:	2101      	movs	r1, #1
 8000de2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000de6:	f000 fefb 	bl	8001be0 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource8);
 8000dea:	2108      	movs	r1, #8
 8000dec:	2002      	movs	r0, #2
 8000dee:	f000 ffa7 	bl	8001d40 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource9);
 8000df2:	2109      	movs	r1, #9
 8000df4:	2002      	movs	r0, #2
 8000df6:	f000 ffa3 	bl	8001d40 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource10);
 8000dfa:	210a      	movs	r1, #10
 8000dfc:	2002      	movs	r0, #2
 8000dfe:	f000 ff9f 	bl	8001d40 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource11);
 8000e02:	210b      	movs	r1, #11
 8000e04:	2002      	movs	r0, #2
 8000e06:	f000 ff9b 	bl	8001d40 <SYSCFG_EXTILineConfig>

	EXTI_InitStructure.EXTI_Line = EXTI_Line8 | EXTI_Line9 | EXTI_Line10 | EXTI_Line11;
 8000e0a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e0e:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000e10:	2300      	movs	r3, #0
 8000e12:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8000e14:	2308      	movs	r3, #8
 8000e16:	737b      	strb	r3, [r7, #13]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_InitStructure);
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 fa9b 	bl	800135c <EXTI_Init>

	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;
 8000e32:	2317      	movs	r3, #23
 8000e34:	713b      	strb	r3, [r7, #4]
	NVIC_Init(&NVIC_InitStructure);
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fa2d 	bl	8001298 <NVIC_Init>
	NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
 8000e3e:	2328      	movs	r3, #40	; 0x28
 8000e40:	713b      	strb	r3, [r7, #4]
	NVIC_Init(&NVIC_InitStructure);
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fa27 	bl	8001298 <NVIC_Init>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40020800 	.word	0x40020800

08000e58 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler()
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
	uint8_t temp = GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_8);
 8000e5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e62:	4828      	ldr	r0, [pc, #160]	; (8000f04 <EXTI9_5_IRQHandler+0xac>)
 8000e64:	f000 fb8b 	bl	800157e <GPIO_ReadInputDataBit>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]

	if (temp == 1)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d11b      	bne.n	8000eaa <EXTI9_5_IRQHandler+0x52>
	{
		if ((clock_mode == normal) || (clock_mode == wait_alarm))
 8000e72:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <EXTI9_5_IRQHandler+0xb0>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <EXTI9_5_IRQHandler+0x2a>
 8000e7a:	4b23      	ldr	r3, [pc, #140]	; (8000f08 <EXTI9_5_IRQHandler+0xb0>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d103      	bne.n	8000e8a <EXTI9_5_IRQHandler+0x32>
		{
			clock_mode = alarm_setting;
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <EXTI9_5_IRQHandler+0xb0>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	701a      	strb	r2, [r3, #0]
 8000e88:	e00a      	b.n	8000ea0 <EXTI9_5_IRQHandler+0x48>
		}
		else if (clock_mode == alarm_setting)
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <EXTI9_5_IRQHandler+0xb0>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d106      	bne.n	8000ea0 <EXTI9_5_IRQHandler+0x48>
		{
			clock_mode = wait_alarm;
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <EXTI9_5_IRQHandler+0xb0>)
 8000e94:	2202      	movs	r2, #2
 8000e96:	701a      	strb	r2, [r3, #0]
			DS3231_SetAlarmTime(alarm_time);
 8000e98:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <EXTI9_5_IRQHandler+0xb4>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	f7ff fb60 	bl	8000560 <DS3231_SetAlarmTime>
		}

		EXTI_ClearITPendingBit(EXTI_Line8);
 8000ea0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ea4:	f000 facc 	bl	8001440 <EXTI_ClearITPendingBit>
			}
		}

		EXTI_ClearITPendingBit(EXTI_Line9);
	}
}
 8000ea8:	e028      	b.n	8000efc <EXTI9_5_IRQHandler+0xa4>
		if (clock_mode == alarm_setting)
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <EXTI9_5_IRQHandler+0xb0>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d120      	bne.n	8000ef4 <EXTI9_5_IRQHandler+0x9c>
			if (setting_mode == hours_setting)
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <EXTI9_5_IRQHandler+0xb8>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10e      	bne.n	8000ed8 <EXTI9_5_IRQHandler+0x80>
				if (alarm_time.hours < 23)
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <EXTI9_5_IRQHandler+0xb4>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b16      	cmp	r3, #22
 8000ec0:	d806      	bhi.n	8000ed0 <EXTI9_5_IRQHandler+0x78>
					alarm_time.hours++;
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <EXTI9_5_IRQHandler+0xb4>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <EXTI9_5_IRQHandler+0xb4>)
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	e011      	b.n	8000ef4 <EXTI9_5_IRQHandler+0x9c>
					alarm_time.hours = 0;
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <EXTI9_5_IRQHandler+0xb4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	e00d      	b.n	8000ef4 <EXTI9_5_IRQHandler+0x9c>
				if (alarm_time.minutes < 59)
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <EXTI9_5_IRQHandler+0xb4>)
 8000eda:	785b      	ldrb	r3, [r3, #1]
 8000edc:	2b3a      	cmp	r3, #58	; 0x3a
 8000ede:	d806      	bhi.n	8000eee <EXTI9_5_IRQHandler+0x96>
					alarm_time.minutes++;
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <EXTI9_5_IRQHandler+0xb4>)
 8000ee2:	785b      	ldrb	r3, [r3, #1]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <EXTI9_5_IRQHandler+0xb4>)
 8000eea:	705a      	strb	r2, [r3, #1]
 8000eec:	e002      	b.n	8000ef4 <EXTI9_5_IRQHandler+0x9c>
					alarm_time.minutes = 0;
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <EXTI9_5_IRQHandler+0xb4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	705a      	strb	r2, [r3, #1]
		EXTI_ClearITPendingBit(EXTI_Line9);
 8000ef4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ef8:	f000 faa2 	bl	8001440 <EXTI_ClearITPendingBit>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40020800 	.word	0x40020800
 8000f08:	20000053 	.word	0x20000053
 8000f0c:	20000050 	.word	0x20000050
 8000f10:	20000054 	.word	0x20000054

08000f14 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
	uint8_t temp = GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_10);
 8000f1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1e:	4830      	ldr	r0, [pc, #192]	; (8000fe0 <EXTI15_10_IRQHandler+0xcc>)
 8000f20:	f000 fb2d 	bl	800157e <GPIO_ReadInputDataBit>
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]

	if (temp == 1)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d125      	bne.n	8000f7a <EXTI15_10_IRQHandler+0x66>
	{
		if (setting_mode == hours_setting)
 8000f2e:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <EXTI15_10_IRQHandler+0xd0>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10e      	bne.n	8000f54 <EXTI15_10_IRQHandler+0x40>
		{
			if (alarm_time.hours > 0)
 8000f36:	4b2c      	ldr	r3, [pc, #176]	; (8000fe8 <EXTI15_10_IRQHandler+0xd4>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <EXTI15_10_IRQHandler+0x38>
			{
				alarm_time.hours--;
 8000f3e:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <EXTI15_10_IRQHandler+0xd4>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <EXTI15_10_IRQHandler+0xd4>)
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	e011      	b.n	8000f70 <EXTI15_10_IRQHandler+0x5c>
			}
			else
			{
				alarm_time.hours = 23;
 8000f4c:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <EXTI15_10_IRQHandler+0xd4>)
 8000f4e:	2217      	movs	r2, #23
 8000f50:	701a      	strb	r2, [r3, #0]
 8000f52:	e00d      	b.n	8000f70 <EXTI15_10_IRQHandler+0x5c>
			}
		}
		else
		{
			if (alarm_time.minutes > 0)
 8000f54:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <EXTI15_10_IRQHandler+0xd4>)
 8000f56:	785b      	ldrb	r3, [r3, #1]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d006      	beq.n	8000f6a <EXTI15_10_IRQHandler+0x56>
			{
				alarm_time.minutes--;
 8000f5c:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <EXTI15_10_IRQHandler+0xd4>)
 8000f5e:	785b      	ldrb	r3, [r3, #1]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <EXTI15_10_IRQHandler+0xd4>)
 8000f66:	705a      	strb	r2, [r3, #1]
 8000f68:	e002      	b.n	8000f70 <EXTI15_10_IRQHandler+0x5c>
			}
			else
			{
				alarm_time.minutes = 59;
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <EXTI15_10_IRQHandler+0xd4>)
 8000f6c:	223b      	movs	r2, #59	; 0x3b
 8000f6e:	705a      	strb	r2, [r3, #1]
			}
		}

		EXTI_ClearITPendingBit(EXTI_Line10);
 8000f70:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f74:	f000 fa64 	bl	8001440 <EXTI_ClearITPendingBit>
			DS3231_SetAlarmTime(alarm_time);
		}

		EXTI_ClearITPendingBit(EXTI_Line11);
	}
}
 8000f78:	e02e      	b.n	8000fd8 <EXTI15_10_IRQHandler+0xc4>
		if (clock_mode == alarm_setting)
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <EXTI15_10_IRQHandler+0xd8>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d10f      	bne.n	8000fa2 <EXTI15_10_IRQHandler+0x8e>
			if (setting_mode == hours_setting)
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <EXTI15_10_IRQHandler+0xd0>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d103      	bne.n	8000f92 <EXTI15_10_IRQHandler+0x7e>
				setting_mode = minutes_setting;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <EXTI15_10_IRQHandler+0xd0>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	e01e      	b.n	8000fd0 <EXTI15_10_IRQHandler+0xbc>
			else if (setting_mode == minutes_setting)
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <EXTI15_10_IRQHandler+0xd0>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d11a      	bne.n	8000fd0 <EXTI15_10_IRQHandler+0xbc>
				setting_mode = hours_setting;
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <EXTI15_10_IRQHandler+0xd0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
 8000fa0:	e016      	b.n	8000fd0 <EXTI15_10_IRQHandler+0xbc>
		else if (clock_mode == wait_alarm)
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <EXTI15_10_IRQHandler+0xd8>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d103      	bne.n	8000fb2 <EXTI15_10_IRQHandler+0x9e>
			clock_mode = normal;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <EXTI15_10_IRQHandler+0xd8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	e00e      	b.n	8000fd0 <EXTI15_10_IRQHandler+0xbc>
		else if (clock_mode == alarming)
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <EXTI15_10_IRQHandler+0xd8>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d103      	bne.n	8000fc2 <EXTI15_10_IRQHandler+0xae>
			clock_mode = normal;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <EXTI15_10_IRQHandler+0xd8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	e006      	b.n	8000fd0 <EXTI15_10_IRQHandler+0xbc>
			clock_mode = wait_alarm;
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <EXTI15_10_IRQHandler+0xd8>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	701a      	strb	r2, [r3, #0]
			DS3231_SetAlarmTime(alarm_time);
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <EXTI15_10_IRQHandler+0xd4>)
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	f7ff fac8 	bl	8000560 <DS3231_SetAlarmTime>
		EXTI_ClearITPendingBit(EXTI_Line11);
 8000fd0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000fd4:	f000 fa34 	bl	8001440 <EXTI_ClearITPendingBit>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40020800 	.word	0x40020800
 8000fe4:	20000054 	.word	0x20000054
 8000fe8:	20000050 	.word	0x20000050
 8000fec:	20000053 	.word	0x20000053

08000ff0 <delay_ms>:

void delay_ms(uint32_t ms)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < ms; i++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e00d      	b.n	800101a <delay_ms+0x2a>
	{
		for (uint32_t j = 0; j < 5000; j++);
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	e002      	b.n	800100a <delay_ms+0x1a>
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	3301      	adds	r3, #1
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001010:	4293      	cmp	r3, r2
 8001012:	d9f7      	bls.n	8001004 <delay_ms+0x14>
	for (uint32_t i = 0; i < ms; i++)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3301      	adds	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	429a      	cmp	r2, r3
 8001020:	d3ed      	bcc.n	8000ffe <delay_ms+0xe>
	}
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001032:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001034:	f000 f826 	bl	8001084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <LoopForever+0x6>)
  ldr r1, =_edata
 800103a:	490d      	ldr	r1, [pc, #52]	; (8001070 <LoopForever+0xa>)
  ldr r2, =_sidata
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <LoopForever+0xe>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001050:	4c0a      	ldr	r4, [pc, #40]	; (800107c <LoopForever+0x16>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800105e:	f000 feb1 	bl	8001dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001062:	f7ff f8b7 	bl	80001d4 <main>

08001066 <LoopForever>:

LoopForever:
    b LoopForever
 8001066:	e7fe      	b.n	8001066 <LoopForever>
  ldr   r0, =_estack
 8001068:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001074:	08001e2c 	.word	0x08001e2c
  ldr r2, =_sbss
 8001078:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800107c:	20000058 	.word	0x20000058

08001080 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC_IRQHandler>
	...

08001084 <SystemInit>:
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <SystemInit+0x60>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108e:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <SystemInit+0x60>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <SystemInit+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <SystemInit+0x64>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <SystemInit+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <SystemInit+0x64>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <SystemInit+0x64>)
 80010b0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <SystemInit+0x64>)
 80010bc:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <SystemInit+0x68>)
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <SystemInit+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <SystemInit+0x64>)
 80010c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <SystemInit+0x64>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	f000 f88f 	bl	80011f4 <SetSysClock>
 80010d6:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <SystemInit+0x60>)
 80010d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00
 80010e8:	40023800 	.word	0x40023800
 80010ec:	24003010 	.word	0x24003010

080010f0 <SystemCoreClockUpdate>:
 80010f0:	b480      	push	{r7}
 80010f2:	b087      	sub	sp, #28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	2302      	movs	r3, #2
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	2302      	movs	r3, #2
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <SystemCoreClockUpdate+0xf0>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	2b08      	cmp	r3, #8
 8001118:	d011      	beq.n	800113e <SystemCoreClockUpdate+0x4e>
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	2b08      	cmp	r3, #8
 800111e:	d844      	bhi.n	80011aa <SystemCoreClockUpdate+0xba>
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <SystemCoreClockUpdate+0x3e>
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	2b04      	cmp	r3, #4
 800112a:	d004      	beq.n	8001136 <SystemCoreClockUpdate+0x46>
 800112c:	e03d      	b.n	80011aa <SystemCoreClockUpdate+0xba>
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <SystemCoreClockUpdate+0xf4>)
 8001130:	4a2d      	ldr	r2, [pc, #180]	; (80011e8 <SystemCoreClockUpdate+0xf8>)
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e03d      	b.n	80011b2 <SystemCoreClockUpdate+0xc2>
 8001136:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <SystemCoreClockUpdate+0xf4>)
 8001138:	4a2c      	ldr	r2, [pc, #176]	; (80011ec <SystemCoreClockUpdate+0xfc>)
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	e039      	b.n	80011b2 <SystemCoreClockUpdate+0xc2>
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <SystemCoreClockUpdate+0xf0>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	0d9b      	lsrs	r3, r3, #22
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <SystemCoreClockUpdate+0xf0>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00c      	beq.n	8001174 <SystemCoreClockUpdate+0x84>
 800115a:	4a24      	ldr	r2, [pc, #144]	; (80011ec <SystemCoreClockUpdate+0xfc>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001162:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <SystemCoreClockUpdate+0xf0>)
 8001164:	6852      	ldr	r2, [r2, #4]
 8001166:	0992      	lsrs	r2, r2, #6
 8001168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800116c:	fb02 f303 	mul.w	r3, r2, r3
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	e00b      	b.n	800118c <SystemCoreClockUpdate+0x9c>
 8001174:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <SystemCoreClockUpdate+0xf8>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	fbb2 f3f3 	udiv	r3, r2, r3
 800117c:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <SystemCoreClockUpdate+0xf0>)
 800117e:	6852      	ldr	r2, [r2, #4]
 8001180:	0992      	lsrs	r2, r2, #6
 8001182:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001186:	fb02 f303 	mul.w	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <SystemCoreClockUpdate+0xf0>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	0c1b      	lsrs	r3, r3, #16
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	3301      	adds	r3, #1
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a4:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <SystemCoreClockUpdate+0xf4>)
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	e003      	b.n	80011b2 <SystemCoreClockUpdate+0xc2>
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <SystemCoreClockUpdate+0xf4>)
 80011ac:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <SystemCoreClockUpdate+0xf8>)
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	bf00      	nop
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <SystemCoreClockUpdate+0xf0>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	f003 030f 	and.w	r3, r3, #15
 80011bc:	4a0c      	ldr	r2, [pc, #48]	; (80011f0 <SystemCoreClockUpdate+0x100>)
 80011be:	5cd3      	ldrb	r3, [r2, r3]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <SystemCoreClockUpdate+0xf4>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	fa22 f303 	lsr.w	r3, r2, r3
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <SystemCoreClockUpdate+0xf4>)
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	bf00      	nop
 80011d4:	371c      	adds	r7, #28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	2000000c 	.word	0x2000000c
 80011e8:	00f42400 	.word	0x00f42400
 80011ec:	017d7840 	.word	0x017d7840
 80011f0:	20000010 	.word	0x20000010

080011f4 <SetSysClock>:
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <SetSysClock+0x94>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	4a22      	ldr	r2, [pc, #136]	; (8001288 <SetSysClock+0x94>)
 80011fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001202:	6413      	str	r3, [r2, #64]	; 0x40
 8001204:	4b21      	ldr	r3, [pc, #132]	; (800128c <SetSysClock+0x98>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a20      	ldr	r2, [pc, #128]	; (800128c <SetSysClock+0x98>)
 800120a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <SetSysClock+0x94>)
 8001212:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <SetSysClock+0x94>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	6093      	str	r3, [r2, #8]
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <SetSysClock+0x94>)
 800121a:	4a1b      	ldr	r2, [pc, #108]	; (8001288 <SetSysClock+0x94>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	6093      	str	r3, [r2, #8]
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <SetSysClock+0x94>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	4a18      	ldr	r2, [pc, #96]	; (8001288 <SetSysClock+0x94>)
 8001226:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800122a:	6093      	str	r3, [r2, #8]
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <SetSysClock+0x94>)
 800122e:	4a18      	ldr	r2, [pc, #96]	; (8001290 <SetSysClock+0x9c>)
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <SetSysClock+0x94>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a14      	ldr	r2, [pc, #80]	; (8001288 <SetSysClock+0x94>)
 8001238:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	bf00      	nop
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <SetSysClock+0x94>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0f9      	beq.n	8001240 <SetSysClock+0x4c>
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <SetSysClock+0xa0>)
 800124e:	f240 6202 	movw	r2, #1538	; 0x602
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <SetSysClock+0x94>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <SetSysClock+0x94>)
 800125a:	f023 0303 	bic.w	r3, r3, #3
 800125e:	6093      	str	r3, [r2, #8]
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <SetSysClock+0x94>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	4a08      	ldr	r2, [pc, #32]	; (8001288 <SetSysClock+0x94>)
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	6093      	str	r3, [r2, #8]
 800126c:	bf00      	nop
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <SetSysClock+0x94>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b08      	cmp	r3, #8
 8001278:	d1f9      	bne.n	800126e <SetSysClock+0x7a>
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40007000 	.word	0x40007000
 8001290:	08015410 	.word	0x08015410
 8001294:	40023c00 	.word	0x40023c00

08001298 <NVIC_Init>:
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	2300      	movs	r3, #0
 80012a6:	73bb      	strb	r3, [r7, #14]
 80012a8:	230f      	movs	r3, #15
 80012aa:	737b      	strb	r3, [r7, #13]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	78db      	ldrb	r3, [r3, #3]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d039      	beq.n	8001328 <NVIC_Init+0x90>
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <NVIC_Init+0xbc>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	0a1b      	lsrs	r3, r3, #8
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	f1c3 0304 	rsb	r3, r3, #4
 80012ca:	73bb      	strb	r3, [r7, #14]
 80012cc:	7b7a      	ldrb	r2, [r7, #13]
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	fa42 f303 	asr.w	r3, r2, r3
 80012d4:	737b      	strb	r3, [r7, #13]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	785b      	ldrb	r3, [r3, #1]
 80012da:	461a      	mov	r2, r3
 80012dc:	7bbb      	ldrb	r3, [r7, #14]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	789a      	ldrb	r2, [r3, #2]
 80012e8:	7b7b      	ldrb	r3, [r7, #13]
 80012ea:	4013      	ands	r3, r2
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	73fb      	strb	r3, [r7, #15]
 80012fa:	4a17      	ldr	r2, [pc, #92]	; (8001358 <NVIC_Init+0xc0>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4413      	add	r3, r2
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	f003 031f 	and.w	r3, r3, #31
 8001310:	4911      	ldr	r1, [pc, #68]	; (8001358 <NVIC_Init+0xc0>)
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	7812      	ldrb	r2, [r2, #0]
 8001316:	0952      	lsrs	r2, r2, #5
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	4610      	mov	r0, r2
 800131c:	2201      	movs	r2, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 8001326:	e00f      	b.n	8001348 <NVIC_Init+0xb0>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	f003 031f 	and.w	r3, r3, #31
 8001330:	4909      	ldr	r1, [pc, #36]	; (8001358 <NVIC_Init+0xc0>)
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	7812      	ldrb	r2, [r2, #0]
 8001336:	0952      	lsrs	r2, r2, #5
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	4610      	mov	r0, r2
 800133c:	2201      	movs	r2, #1
 800133e:	409a      	lsls	r2, r3
 8001340:	f100 0320 	add.w	r3, r0, #32
 8001344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00
 8001358:	e000e100 	.word	0xe000e100

0800135c <EXTI_Init>:
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	4b34      	ldr	r3, [pc, #208]	; (800143c <EXTI_Init+0xe0>)
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	799b      	ldrb	r3, [r3, #6]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d04f      	beq.n	8001414 <EXTI_Init+0xb8>
 8001374:	4b31      	ldr	r3, [pc, #196]	; (800143c <EXTI_Init+0xe0>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	43db      	mvns	r3, r3
 800137e:	492f      	ldr	r1, [pc, #188]	; (800143c <EXTI_Init+0xe0>)
 8001380:	4013      	ands	r3, r2
 8001382:	600b      	str	r3, [r1, #0]
 8001384:	4b2d      	ldr	r3, [pc, #180]	; (800143c <EXTI_Init+0xe0>)
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	43db      	mvns	r3, r3
 800138e:	492b      	ldr	r1, [pc, #172]	; (800143c <EXTI_Init+0xe0>)
 8001390:	4013      	ands	r3, r2
 8001392:	604b      	str	r3, [r1, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	791b      	ldrb	r3, [r3, #4]
 8001398:	461a      	mov	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4413      	add	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6819      	ldr	r1, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	4b23      	ldr	r3, [pc, #140]	; (800143c <EXTI_Init+0xe0>)
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	4920      	ldr	r1, [pc, #128]	; (800143c <EXTI_Init+0xe0>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	608b      	str	r3, [r1, #8]
 80013be:	4b1f      	ldr	r3, [pc, #124]	; (800143c <EXTI_Init+0xe0>)
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	491c      	ldr	r1, [pc, #112]	; (800143c <EXTI_Init+0xe0>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	60cb      	str	r3, [r1, #12]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	795b      	ldrb	r3, [r3, #5]
 80013d2:	2b10      	cmp	r3, #16
 80013d4:	d10e      	bne.n	80013f4 <EXTI_Init+0x98>
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <EXTI_Init+0xe0>)
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4917      	ldr	r1, [pc, #92]	; (800143c <EXTI_Init+0xe0>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	608b      	str	r3, [r1, #8]
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <EXTI_Init+0xe0>)
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4913      	ldr	r1, [pc, #76]	; (800143c <EXTI_Init+0xe0>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	60cb      	str	r3, [r1, #12]
 80013f2:	e01d      	b.n	8001430 <EXTI_Init+0xd4>
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <EXTI_Init+0xe0>)
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	795b      	ldrb	r3, [r3, #5]
 80013fc:	461a      	mov	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4413      	add	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6819      	ldr	r1, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e00d      	b.n	8001430 <EXTI_Init+0xd4>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	791b      	ldrb	r3, [r3, #4]
 8001418:	461a      	mov	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4413      	add	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6819      	ldr	r1, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	43da      	mvns	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	400a      	ands	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40013c00 	.word	0x40013c00

08001440 <EXTI_ClearITPendingBit>:
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <EXTI_ClearITPendingBit+0x1c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6153      	str	r3, [r2, #20]
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40013c00 	.word	0x40013c00

08001460 <GPIO_Init>:
 8001460:	b480      	push	{r7}
 8001462:	b087      	sub	sp, #28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	e076      	b.n	800156a <GPIO_Init+0x10a>
 800147c:	2201      	movs	r2, #1
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	429a      	cmp	r2, r3
 8001496:	d165      	bne.n	8001564 <GPIO_Init+0x104>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2103      	movs	r1, #3
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	401a      	ands	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	791b      	ldrb	r3, [r3, #4]
 80014b6:	4619      	mov	r1, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	431a      	orrs	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	791b      	ldrb	r3, [r3, #4]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d003      	beq.n	80014d6 <GPIO_Init+0x76>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	791b      	ldrb	r3, [r3, #4]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d12e      	bne.n	8001534 <GPIO_Init+0xd4>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2103      	movs	r1, #3
 80014e0:	fa01 f303 	lsl.w	r3, r1, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	401a      	ands	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	795b      	ldrb	r3, [r3, #5]
 80014f4:	4619      	mov	r1, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4619      	mov	r1, r3
 800150e:	2301      	movs	r3, #1
 8001510:	408b      	lsls	r3, r1
 8001512:	43db      	mvns	r3, r3
 8001514:	401a      	ands	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	7992      	ldrb	r2, [r2, #6]
 8001522:	4611      	mov	r1, r2
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	b292      	uxth	r2, r2
 8001528:	fa01 f202 	lsl.w	r2, r1, r2
 800152c:	b292      	uxth	r2, r2
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	b29b      	uxth	r3, r3
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2103      	movs	r1, #3
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	401a      	ands	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	79db      	ldrb	r3, [r3, #7]
 8001554:	4619      	mov	r1, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2b0f      	cmp	r3, #15
 800156e:	d985      	bls.n	800147c <GPIO_Init+0x1c>
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	371c      	adds	r7, #28
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <GPIO_ReadInputDataBit>:
 800157e:	b480      	push	{r7}
 8001580:	b085      	sub	sp, #20
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	460b      	mov	r3, r1
 8001588:	807b      	strh	r3, [r7, #2]
 800158a:	2300      	movs	r3, #0
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	4013      	ands	r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <GPIO_ReadInputDataBit+0x22>
 800159a:	2301      	movs	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	e001      	b.n	80015a4 <GPIO_ReadInputDataBit+0x26>
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <GPIO_SetBits>:
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	807b      	strh	r3, [r7, #2]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	887a      	ldrh	r2, [r7, #2]
 80015c2:	831a      	strh	r2, [r3, #24]
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <GPIO_ResetBits>:
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	835a      	strh	r2, [r3, #26]
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <GPIO_PinAFConfig>:
 80015ee:	b480      	push	{r7}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	460b      	mov	r3, r1
 80015f8:	807b      	strh	r3, [r7, #2]
 80015fa:	4613      	mov	r3, r2
 80015fc:	707b      	strb	r3, [r7, #1]
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	787a      	ldrb	r2, [r7, #1]
 8001608:	887b      	ldrh	r3, [r7, #2]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	887b      	ldrh	r3, [r7, #2]
 8001618:	08db      	lsrs	r3, r3, #3
 800161a:	b29b      	uxth	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3208      	adds	r2, #8
 8001622:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	210f      	movs	r1, #15
 8001630:	fa01 f303 	lsl.w	r3, r1, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	8879      	ldrh	r1, [r7, #2]
 8001638:	08c9      	lsrs	r1, r1, #3
 800163a:	b289      	uxth	r1, r1
 800163c:	4608      	mov	r0, r1
 800163e:	ea02 0103 	and.w	r1, r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f100 0208 	add.w	r2, r0, #8
 8001648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	08db      	lsrs	r3, r3, #3
 8001650:	b29b      	uxth	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3208      	adds	r2, #8
 8001658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	b29b      	uxth	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3208      	adds	r2, #8
 800166e:	68b9      	ldr	r1, [r7, #8]
 8001670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <I2C_Init>:
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	2300      	movs	r3, #0
 800168c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800168e:	2300      	movs	r3, #0
 8001690:	847b      	strh	r3, [r7, #34]	; 0x22
 8001692:	2304      	movs	r3, #4
 8001694:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001696:	4b57      	ldr	r3, [pc, #348]	; (80017f4 <I2C_Init+0x174>)
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	889b      	ldrh	r3, [r3, #4]
 800169e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80016a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 f9a9 	bl	8001a04 <RCC_GetClocksFreq>
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	4a4f      	ldr	r2, [pc, #316]	; (80017f8 <I2C_Init+0x178>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	0c9b      	lsrs	r3, r3, #18
 80016c0:	847b      	strh	r3, [r7, #34]	; 0x22
 80016c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80016c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80016c6:	4313      	orrs	r3, r2
 80016c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80016ce:	809a      	strh	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	801a      	strh	r2, [r3, #0]
 80016e0:	2300      	movs	r3, #0
 80016e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a44      	ldr	r2, [pc, #272]	; (80017fc <I2C_Init+0x17c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d815      	bhi.n	800171a <I2C_Init+0x9a>
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80016fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d801      	bhi.n	8001706 <I2C_Init+0x86>
 8001702:	2304      	movs	r3, #4
 8001704:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001706:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001708:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800170a:	4313      	orrs	r3, r2
 800170c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800170e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001710:	3301      	adds	r3, #1
 8001712:	b29a      	uxth	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	841a      	strh	r2, [r3, #32]
 8001718:	e040      	b.n	800179c <I2C_Init+0x11c>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	88db      	ldrh	r3, [r3, #6]
 800171e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001722:	4293      	cmp	r3, r2
 8001724:	d109      	bne.n	800173a <I2C_Init+0xba>
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001738:	e00e      	b.n	8001758 <I2C_Init+0xd8>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	009a      	lsls	r2, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	fbb2 f3f3 	udiv	r3, r2, r3
 800174e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001756:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001758:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800175a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175e:	2b00      	cmp	r3, #0
 8001760:	d103      	bne.n	800176a <I2C_Init+0xea>
 8001762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	84bb      	strh	r3, [r7, #36]	; 0x24
 800176a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800176c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800176e:	4313      	orrs	r3, r2
 8001770:	b29b      	uxth	r3, r3
 8001772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800177a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800177c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800177e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001782:	fb02 f303 	mul.w	r3, r2, r3
 8001786:	4a1e      	ldr	r2, [pc, #120]	; (8001800 <I2C_Init+0x180>)
 8001788:	fb82 1203 	smull	r1, r2, r2, r3
 800178c:	1192      	asrs	r2, r2, #6
 800178e:	17db      	asrs	r3, r3, #31
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	b29b      	uxth	r3, r3
 8001794:	3301      	adds	r3, #1
 8001796:	b29a      	uxth	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	841a      	strh	r2, [r3, #32]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80017a0:	839a      	strh	r2, [r3, #28]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	801a      	strh	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80017b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017ba:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80017be:	f023 0302 	bic.w	r3, r3, #2
 80017c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	889a      	ldrh	r2, [r3, #4]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	895b      	ldrh	r3, [r3, #10]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017d2:	4313      	orrs	r3, r2
 80017d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80017da:	801a      	strh	r2, [r3, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	899a      	ldrh	r2, [r3, #12]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	891b      	ldrh	r3, [r3, #8]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	811a      	strh	r2, [r3, #8]
 80017ec:	bf00      	nop
 80017ee:	3728      	adds	r7, #40	; 0x28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	007a1200 	.word	0x007a1200
 80017f8:	431bde83 	.word	0x431bde83
 80017fc:	000186a0 	.word	0x000186a0
 8001800:	10624dd3 	.word	0x10624dd3

08001804 <I2C_Cmd>:
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	70fb      	strb	r3, [r7, #3]
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d008      	beq.n	8001828 <I2C_Cmd+0x24>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	b29a      	uxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	801a      	strh	r2, [r3, #0]
 8001826:	e007      	b.n	8001838 <I2C_Cmd+0x34>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	b29b      	uxth	r3, r3
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	b29a      	uxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	801a      	strh	r2, [r3, #0]
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <I2C_GenerateSTART>:
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	70fb      	strb	r3, [r7, #3]
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d008      	beq.n	8001868 <I2C_GenerateSTART+0x24>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001860:	b29a      	uxth	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	801a      	strh	r2, [r3, #0]
 8001866:	e007      	b.n	8001878 <I2C_GenerateSTART+0x34>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001872:	b29a      	uxth	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	801a      	strh	r2, [r3, #0]
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <I2C_GenerateSTOP>:
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	70fb      	strb	r3, [r7, #3]
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d008      	beq.n	80018a8 <I2C_GenerateSTOP+0x24>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	801a      	strh	r2, [r3, #0]
 80018a6:	e007      	b.n	80018b8 <I2C_GenerateSTOP+0x34>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	801a      	strh	r2, [r3, #0]
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <I2C_Send7bitAddress>:
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	70fb      	strb	r3, [r7, #3]
 80018d0:	4613      	mov	r3, r2
 80018d2:	70bb      	strb	r3, [r7, #2]
 80018d4:	78bb      	ldrb	r3, [r7, #2]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d004      	beq.n	80018e4 <I2C_Send7bitAddress+0x20>
 80018da:	78fb      	ldrb	r3, [r7, #3]
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	70fb      	strb	r3, [r7, #3]
 80018e2:	e003      	b.n	80018ec <I2C_Send7bitAddress+0x28>
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	70fb      	strb	r3, [r7, #3]
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	821a      	strh	r2, [r3, #16]
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <I2C_SendData>:
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	b29a      	uxth	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	821a      	strh	r2, [r3, #16]
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <I2C_ReceiveData>:
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	8a1b      	ldrh	r3, [r3, #16]
 800192c:	b29b      	uxth	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <I2C_CheckEvent>:
 800193c:	b480      	push	{r7}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	2300      	movs	r3, #0
 8001954:	75fb      	strb	r3, [r7, #23]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	8a9b      	ldrh	r3, [r3, #20]
 800195a:	b29b      	uxth	r3, r3
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	8b1b      	ldrh	r3, [r3, #24]
 8001962:	b29b      	uxth	r3, r3
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	4313      	orrs	r3, r2
 8001972:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	4013      	ands	r3, r2
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d102      	bne.n	800198a <I2C_CheckEvent+0x4e>
 8001984:	2301      	movs	r3, #1
 8001986:	75fb      	strb	r3, [r7, #23]
 8001988:	e001      	b.n	800198e <I2C_CheckEvent+0x52>
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	4618      	mov	r0, r3
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <I2C_GetFlagStatus>:
 800199c:	b480      	push	{r7}
 800199e:	b087      	sub	sp, #28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	75fb      	strb	r3, [r7, #23]
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	0f1b      	lsrs	r3, r3, #28
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <I2C_GetFlagStatus+0x36>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3314      	adds	r3, #20
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	e005      	b.n	80019de <I2C_GetFlagStatus+0x42>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	0c1b      	lsrs	r3, r3, #16
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3318      	adds	r3, #24
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d002      	beq.n	80019f0 <I2C_GetFlagStatus+0x54>
 80019ea:	2301      	movs	r3, #1
 80019ec:	75fb      	strb	r3, [r7, #23]
 80019ee:	e001      	b.n	80019f4 <I2C_GetFlagStatus+0x58>
 80019f0:	2300      	movs	r3, #0
 80019f2:	75fb      	strb	r3, [r7, #23]
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	4618      	mov	r0, r3
 80019f8:	371c      	adds	r7, #28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <RCC_GetClocksFreq>:
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	; 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	2302      	movs	r3, #2
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	2302      	movs	r3, #2
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	4b4a      	ldr	r3, [pc, #296]	; (8001b50 <RCC_GetClocksFreq+0x14c>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d011      	beq.n	8001a58 <RCC_GetClocksFreq+0x54>
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d844      	bhi.n	8001ac4 <RCC_GetClocksFreq+0xc0>
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <RCC_GetClocksFreq+0x44>
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d004      	beq.n	8001a50 <RCC_GetClocksFreq+0x4c>
 8001a46:	e03d      	b.n	8001ac4 <RCC_GetClocksFreq+0xc0>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a42      	ldr	r2, [pc, #264]	; (8001b54 <RCC_GetClocksFreq+0x150>)
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e03d      	b.n	8001acc <RCC_GetClocksFreq+0xc8>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a41      	ldr	r2, [pc, #260]	; (8001b58 <RCC_GetClocksFreq+0x154>)
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	e039      	b.n	8001acc <RCC_GetClocksFreq+0xc8>
 8001a58:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <RCC_GetClocksFreq+0x14c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	0d9b      	lsrs	r3, r3, #22
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <RCC_GetClocksFreq+0x14c>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00c      	beq.n	8001a8e <RCC_GetClocksFreq+0x8a>
 8001a74:	4a38      	ldr	r2, [pc, #224]	; (8001b58 <RCC_GetClocksFreq+0x154>)
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7c:	4a34      	ldr	r2, [pc, #208]	; (8001b50 <RCC_GetClocksFreq+0x14c>)
 8001a7e:	6852      	ldr	r2, [r2, #4]
 8001a80:	0992      	lsrs	r2, r2, #6
 8001a82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a86:	fb02 f303 	mul.w	r3, r2, r3
 8001a8a:	61fb      	str	r3, [r7, #28]
 8001a8c:	e00b      	b.n	8001aa6 <RCC_GetClocksFreq+0xa2>
 8001a8e:	4a31      	ldr	r2, [pc, #196]	; (8001b54 <RCC_GetClocksFreq+0x150>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a96:	4a2e      	ldr	r2, [pc, #184]	; (8001b50 <RCC_GetClocksFreq+0x14c>)
 8001a98:	6852      	ldr	r2, [r2, #4]
 8001a9a:	0992      	lsrs	r2, r2, #6
 8001a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <RCC_GetClocksFreq+0x14c>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	0c1b      	lsrs	r3, r3, #16
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	fbb2 f2f3 	udiv	r2, r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e003      	b.n	8001acc <RCC_GetClocksFreq+0xc8>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <RCC_GetClocksFreq+0x150>)
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	bf00      	nop
 8001acc:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <RCC_GetClocksFreq+0x14c>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	4a1f      	ldr	r2, [pc, #124]	; (8001b5c <RCC_GetClocksFreq+0x158>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	40da      	lsrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <RCC_GetClocksFreq+0x14c>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	0a9b      	lsrs	r3, r3, #10
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	4a15      	ldr	r2, [pc, #84]	; (8001b5c <RCC_GetClocksFreq+0x158>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4413      	add	r3, r2
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	40da      	lsrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <RCC_GetClocksFreq+0x14c>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	0b5b      	lsrs	r3, r3, #13
 8001b2a:	61bb      	str	r3, [r7, #24]
 8001b2c:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <RCC_GetClocksFreq+0x158>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4413      	add	r3, r2
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	40da      	lsrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	bf00      	nop
 8001b46:	3724      	adds	r7, #36	; 0x24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	40023800 	.word	0x40023800
 8001b54:	00f42400 	.word	0x00f42400
 8001b58:	017d7840 	.word	0x017d7840
 8001b5c:	20000020 	.word	0x20000020

08001b60 <RCC_AHB1PeriphClockCmd>:
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	70fb      	strb	r3, [r7, #3]
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <RCC_AHB1PeriphClockCmd+0x20>
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b76:	4909      	ldr	r1, [pc, #36]	; (8001b9c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	630b      	str	r3, [r1, #48]	; 0x30
 8001b7e:	e006      	b.n	8001b8e <RCC_AHB1PeriphClockCmd+0x2e>
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	4904      	ldr	r1, [pc, #16]	; (8001b9c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	630b      	str	r3, [r1, #48]	; 0x30
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <RCC_APB1PeriphClockCmd>:
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <RCC_APB1PeriphClockCmd+0x20>
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <RCC_APB1PeriphClockCmd+0x3c>)
 8001bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb6:	4909      	ldr	r1, [pc, #36]	; (8001bdc <RCC_APB1PeriphClockCmd+0x3c>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	640b      	str	r3, [r1, #64]	; 0x40
 8001bbe:	e006      	b.n	8001bce <RCC_APB1PeriphClockCmd+0x2e>
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <RCC_APB1PeriphClockCmd+0x3c>)
 8001bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	4904      	ldr	r1, [pc, #16]	; (8001bdc <RCC_APB1PeriphClockCmd+0x3c>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	640b      	str	r3, [r1, #64]	; 0x40
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800

08001be0 <RCC_APB2PeriphClockCmd>:
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d006      	beq.n	8001c00 <RCC_APB2PeriphClockCmd+0x20>
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <RCC_APB2PeriphClockCmd+0x3c>)
 8001bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bf6:	4909      	ldr	r1, [pc, #36]	; (8001c1c <RCC_APB2PeriphClockCmd+0x3c>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	644b      	str	r3, [r1, #68]	; 0x44
 8001bfe:	e006      	b.n	8001c0e <RCC_APB2PeriphClockCmd+0x2e>
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <RCC_APB2PeriphClockCmd+0x3c>)
 8001c02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	4904      	ldr	r1, [pc, #16]	; (8001c1c <RCC_APB2PeriphClockCmd+0x3c>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	644b      	str	r3, [r1, #68]	; 0x44
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800

08001c20 <SPI_Init>:
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	81fb      	strh	r3, [r7, #14]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	81fb      	strh	r3, [r7, #14]
 8001c34:	89fb      	ldrh	r3, [r7, #14]
 8001c36:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001c3a:	81fb      	strh	r3, [r7, #14]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	881a      	ldrh	r2, [r3, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	885b      	ldrh	r3, [r3, #2]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	889b      	ldrh	r3, [r3, #4]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	88db      	ldrh	r3, [r3, #6]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	891b      	ldrh	r3, [r3, #8]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	895b      	ldrh	r3, [r3, #10]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	899b      	ldrh	r3, [r3, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	89db      	ldrh	r3, [r3, #14]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	89fb      	ldrh	r3, [r7, #14]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	81fb      	strh	r3, [r7, #14]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	89fa      	ldrh	r2, [r7, #14]
 8001c82:	801a      	strh	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	8b9b      	ldrh	r3, [r3, #28]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	839a      	strh	r2, [r3, #28]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	8a1a      	ldrh	r2, [r3, #16]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	821a      	strh	r2, [r3, #16]
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <SPI_Cmd>:
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d008      	beq.n	8001ccc <SPI_Cmd+0x24>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	801a      	strh	r2, [r3, #0]
 8001cca:	e007      	b.n	8001cdc <SPI_Cmd+0x34>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	801a      	strh	r2, [r3, #0]
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <SPI_I2S_SendData>:
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	819a      	strh	r2, [r3, #12]
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <SPI_I2S_GetFlagStatus>:
 8001d06:	b480      	push	{r7}
 8001d08:	b085      	sub	sp, #20
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	807b      	strh	r3, [r7, #2]
 8001d12:	2300      	movs	r3, #0
 8001d14:	73fb      	strb	r3, [r7, #15]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	891b      	ldrh	r3, [r3, #8]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	887b      	ldrh	r3, [r7, #2]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <SPI_I2S_GetFlagStatus+0x26>
 8001d26:	2301      	movs	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
 8001d2a:	e001      	b.n	8001d30 <SPI_I2S_GetFlagStatus+0x2a>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <SYSCFG_EXTILineConfig>:
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	460a      	mov	r2, r1
 8001d4a:	71fb      	strb	r3, [r7, #7]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	71bb      	strb	r3, [r7, #6]
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	79bb      	ldrb	r3, [r7, #6]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	4a16      	ldr	r2, [pc, #88]	; (8001dc0 <SYSCFG_EXTILineConfig+0x80>)
 8001d66:	79bb      	ldrb	r3, [r7, #6]
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	4812      	ldr	r0, [pc, #72]	; (8001dc0 <SYSCFG_EXTILineConfig+0x80>)
 8001d78:	79b9      	ldrb	r1, [r7, #6]
 8001d7a:	0889      	lsrs	r1, r1, #2
 8001d7c:	b2c9      	uxtb	r1, r1
 8001d7e:	401a      	ands	r2, r3
 8001d80:	1c8b      	adds	r3, r1, #2
 8001d82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001d86:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <SYSCFG_EXTILineConfig+0x80>)
 8001d88:	79bb      	ldrb	r3, [r7, #6]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	3302      	adds	r3, #2
 8001d90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d94:	79f9      	ldrb	r1, [r7, #7]
 8001d96:	79bb      	ldrb	r3, [r7, #6]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	4807      	ldr	r0, [pc, #28]	; (8001dc0 <SYSCFG_EXTILineConfig+0x80>)
 8001da4:	79b9      	ldrb	r1, [r7, #6]
 8001da6:	0889      	lsrs	r1, r1, #2
 8001da8:	b2c9      	uxtb	r1, r1
 8001daa:	431a      	orrs	r2, r3
 8001dac:	1c8b      	adds	r3, r1, #2
 8001dae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40013800 	.word	0x40013800

08001dc4 <__libc_init_array>:
 8001dc4:	b570      	push	{r4, r5, r6, lr}
 8001dc6:	4d0d      	ldr	r5, [pc, #52]	; (8001dfc <__libc_init_array+0x38>)
 8001dc8:	4c0d      	ldr	r4, [pc, #52]	; (8001e00 <__libc_init_array+0x3c>)
 8001dca:	1b64      	subs	r4, r4, r5
 8001dcc:	10a4      	asrs	r4, r4, #2
 8001dce:	2600      	movs	r6, #0
 8001dd0:	42a6      	cmp	r6, r4
 8001dd2:	d109      	bne.n	8001de8 <__libc_init_array+0x24>
 8001dd4:	4d0b      	ldr	r5, [pc, #44]	; (8001e04 <__libc_init_array+0x40>)
 8001dd6:	4c0c      	ldr	r4, [pc, #48]	; (8001e08 <__libc_init_array+0x44>)
 8001dd8:	f000 f818 	bl	8001e0c <_init>
 8001ddc:	1b64      	subs	r4, r4, r5
 8001dde:	10a4      	asrs	r4, r4, #2
 8001de0:	2600      	movs	r6, #0
 8001de2:	42a6      	cmp	r6, r4
 8001de4:	d105      	bne.n	8001df2 <__libc_init_array+0x2e>
 8001de6:	bd70      	pop	{r4, r5, r6, pc}
 8001de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dec:	4798      	blx	r3
 8001dee:	3601      	adds	r6, #1
 8001df0:	e7ee      	b.n	8001dd0 <__libc_init_array+0xc>
 8001df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001df6:	4798      	blx	r3
 8001df8:	3601      	adds	r6, #1
 8001dfa:	e7f2      	b.n	8001de2 <__libc_init_array+0x1e>
 8001dfc:	08001e24 	.word	0x08001e24
 8001e00:	08001e24 	.word	0x08001e24
 8001e04:	08001e24 	.word	0x08001e24
 8001e08:	08001e28 	.word	0x08001e28

08001e0c <_init>:
 8001e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0e:	bf00      	nop
 8001e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e12:	bc08      	pop	{r3}
 8001e14:	469e      	mov	lr, r3
 8001e16:	4770      	bx	lr

08001e18 <_fini>:
 8001e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1a:	bf00      	nop
 8001e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e1e:	bc08      	pop	{r3}
 8001e20:	469e      	mov	lr, r3
 8001e22:	4770      	bx	lr
